# Multi-modal Dockerfile for Second Brain
# Includes all dependencies for processing various file types
# Build with: docker build -f Dockerfile.multimodal -t secondbrain:multimodal .

# Build stage
FROM python:3.11-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    # Additional dependencies for multi-modal support
    libxml2-dev \
    libxslt1-dev \
    libffi-dev \
    libssl-dev \
    # Audio/video processing
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libportaudio2 \
    libportaudiocpp0 \
    portaudio19-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy all requirements files
COPY config/requirements.txt config/requirements-production.txt config/requirements-multimodal.txt ./config/

# Install Python dependencies including multi-modal support
RUN pip install --upgrade pip && \
    pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels \
    -r config/requirements-production.txt && \
    pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels \
    -r config/requirements-multimodal.txt

# Runtime stage
FROM python:3.11-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    # Multi-modal runtime dependencies
    tesseract-ocr \
    tesseract-ocr-eng \
    tesseract-ocr-fra \
    tesseract-ocr-deu \
    tesseract-ocr-spa \
    ffmpeg \
    libsm6 \
    libxext6 \
    libglib2.0-0 \
    libgomp1 \
    # Audio processing
    libportaudio2 \
    flac \
    # Additional tools
    poppler-utils \
    antiword \
    unrtf \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy wheels from builder
COPY --from=builder /app/wheels /wheels

# Install Python packages
RUN pip install --upgrade pip && \
    pip install --no-cache /wheels/* && \
    rm -rf /wheels

# Download spaCy language model
RUN python -m spacy download en_core_web_sm

# Copy application code
COPY --chown=appuser:appuser . .

# Create necessary directories
RUN mkdir -p /app/data /app/logs /app/temp /app/models && \
    chown -R appuser:appuser /app/data /app/logs /app/temp /app/models

# Set environment variables
ENV TEMP_DIR=/app/temp
ENV PYTHONUNBUFFERED=1
ENV TESSDATA_PREFIX=/usr/share/tesseract-ocr/5/tessdata

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]