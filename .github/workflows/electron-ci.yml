name: Electron App CI

on:
  push:
    paths:
      - 'electron/**'
      - '.github/workflows/electron-ci.yml'
    branches: [main, develop]
  pull_request:
    paths:
      - 'electron/**'
      - '.github/workflows/electron-ci.yml'
    branches: [main, develop]

permissions:
  contents: read
  actions: read

env:
  NODE_VERSION: '20'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    defaults:
      run:
        working-directory: electron
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate cache key
        id: cache-key
        run: echo "value=${{ hashFiles('electron/package*.json', 'electron/yarn.lock') }}" >> $GITHUB_OUTPUT

  lint-and-test:
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    defaults:
      run:
        working-directory: electron
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: electron/package-lock.json

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: electron/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: npm ci

      - name: Cache ESLint
        uses: actions/cache@v4
        with:
          path: electron/.eslintcache
          key: ${{ runner.os }}-eslint-${{ hashFiles('electron/.eslintrc*', 'electron/package*.json') }}
          restore-keys: |
            ${{ runner.os }}-eslint-

      - name: Run linting
        run: |
          npm run lint -- --cache --cache-location .eslintcache
        continue-on-error: false

      - name: Run type checking (if TypeScript)
        run: |
          if [ -f "tsconfig.json" ]; then
            npm run type-check || npx tsc --noEmit
          else
            echo "No TypeScript configuration found, skipping type check"
          fi
        shell: bash

      - name: Run Jest unit tests
        run: npm test -- --coverage --watchAll=false
        env:
          NODE_ENV: test

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: unit-test-coverage
          path: electron/coverage/

  e2e-tests:
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    defaults:
      run:
        working-directory: electron
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: electron/package-lock.json

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: electron/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/Library/Caches/ms-playwright
            %USERPROFILE%\AppData\Local\ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('electron/package*.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Run Playwright E2E tests
        run: npm run e2e
        env:
          NODE_ENV: test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.os }}
          path: |
            electron/test-results/
            electron/playwright-report/

  build:
    runs-on: ${{ matrix.os }}
    needs: [setup, lint-and-test]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    defaults:
      run:
        working-directory: electron
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: electron/package-lock.json

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: electron/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: npm ci

      - name: Build Electron app
        run: npm run build
        env:
          NODE_ENV: production

      - name: Package Electron app
        run: npm run package || npm run dist
        env:
          NODE_ENV: production

      - name: Test packaged app (basic smoke test)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Basic smoke test for the packaged app
          if [ -d "dist" ]; then
            echo "‚úÖ Distribution files created successfully"
            ls -la dist/
          else
            echo "‚ùå No distribution files found"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-build-${{ matrix.os }}
          path: |
            electron/dist/
            electron/out/
          retention-days: 7

  security-audit:
    runs-on: ubuntu-latest
    needs: setup
    defaults:
      run:
        working-directory: electron
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: electron/package-lock.json

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run npm audit fix
        run: |
          npm audit fix --dry-run
        continue-on-error: true

      - name: Check for outdated packages
        run: |
          npm outdated || echo "Outdated packages check completed"

  performance-test:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: electron
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: electron/package-lock.json

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: electron/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          # Add performance testing commands here
          echo "üöÄ Running performance tests..."
          
          # Bundle size analysis
          if command -v npx &> /dev/null && [ -f "webpack.config.js" ]; then
            npx webpack-bundle-analyzer dist/main.js --mode static --report bundle-report.html --no-open || echo "Bundle analysis completed"
          fi
          
          # Startup time test (basic)
          echo "‚è±Ô∏è Testing startup performance..."
          npm run start-test || echo "Startup test completed"

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: |
            electron/bundle-report.html
            electron/performance-results/

  summary:
    runs-on: ubuntu-latest
    needs: [lint-and-test, e2e-tests, build, security-audit]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "üéØ Electron CI Pipeline Summary"
          echo "================================"
          echo "Lint & Test: ${{ needs.lint-and-test.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo ""
          
          if [[ "${{ needs.lint-and-test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "‚úÖ Electron CI pipeline completed successfully!"
          else
            echo "‚ùå Electron CI pipeline failed!"
            exit 1
          fi
