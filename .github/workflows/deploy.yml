name: deploy

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
  workflow_dispatch: # Allow manual deployment

jobs:
  deploy-staging:
    if: github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Add Docker login step - CRITICAL FIX
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY && format('{0}/second-brain:staging-{1}', secrets.DOCKER_REGISTRY, github.sha) || format('second-brain:staging-{0}', github.sha) }}
            ${{ secrets.DOCKER_REGISTRY && format('{0}/second-brain:staging-latest', secrets.DOCKER_REGISTRY) || 'second-brain:staging-latest' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Move cache - PERFORMANCE FIX
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy to staging
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          STAGING_API_TOKENS: ${{ secrets.STAGING_API_TOKENS }}
        run: |
          echo "Deploying to staging environment..."
          docker compose -f docker-compose.staging.yml down || true
          docker compose -f docker-compose.staging.yml pull
          docker compose -f docker-compose.staging.yml up -d

      - name: Wait for services to start
        run: |
          echo "Waiting for services to start..."
          sleep 30

      - name: Health check staging
        run: |
          echo "Performing health check on staging..."
          timeout 120 bash -c 'until curl -f http://localhost:8001/health; do echo "Waiting for health check..."; sleep 5; done'
          echo "Staging deployment successful!"

      - name: Print logs on failure
        if: failure()
        run: |
          echo "=== Docker Compose Logs ==="
          docker compose -f docker-compose.staging.yml logs
          echo "=== Container Status ==="
          docker compose -f docker-compose.staging.yml ps

  deploy-production:
    if: github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    needs: deploy-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Add Docker login step - CRITICAL FIX
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY && format('{0}/second-brain:production-{1}', secrets.DOCKER_REGISTRY, github.sha) || format('second-brain:production-{0}', github.sha) }}
            ${{ secrets.DOCKER_REGISTRY && format('{0}/second-brain:production-latest', secrets.DOCKER_REGISTRY) || 'second-brain:production-latest' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Move cache - PERFORMANCE FIX
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy to production
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PRODUCTION_API_TOKENS: ${{ secrets.PRODUCTION_API_TOKENS }}
        run: |
          echo "Deploying to production environment..."
          docker compose -f docker-compose.production.yml down || true
          docker compose -f docker-compose.production.yml pull
          docker compose -f docker-compose.production.yml up -d

      - name: Wait for services to start
        run: |
          echo "Waiting for services to start..."
          sleep 30

      - name: Health check production
        run: |
          echo "Performing health check on production..."
          timeout 120 bash -c 'until curl -f http://localhost:8000/health; do echo "Waiting for health check..."; sleep 5; done'
          echo "Production deployment successful!"

      - name: Print logs on failure
        if: failure()
        run: |
          echo "=== Docker Compose Logs ==="
          docker compose -f docker-compose.production.yml logs
          echo "=== Container Status ==="
          docker compose -f docker-compose.production.yml ps

      - name: Notify deployment success
        run: |
          echo "ðŸš€ Deployment to production completed successfully!"
          echo "Version: ${{ github.sha }}"
          echo "Environment: Production"
          echo "Docker Image: ${{ secrets.DOCKER_REGISTRY && format('{0}/second-brain:production-{1}', secrets.DOCKER_REGISTRY, github.sha) || format('second-brain:production-{0}', github.sha) }}"
