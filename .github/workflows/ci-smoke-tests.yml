# CI: Smoke Tests - Critical Path Validation (<60s)
# Hash-pinned actions for security, fast feedback for developers
name: "CI: Smoke Tests"

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.vscode/**'
      - '.gitignore'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '*.md'  
      - 'docs/**'
      - '.vscode/**'
      - '.gitignore'
  workflow_dispatch:

# Optimize for speed - fail fast
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  UV_SYSTEM_PYTHON: 1

jobs:
  smoke-tests:
    name: "🔥 Critical Path Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Strict timeout for speed
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 1  # Shallow clone for speed

      - name: "🐍 Setup Python"
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            config/requirements.txt
            config/requirements-ci.txt

      - name: "⚡ Install Dependencies (Fast)"
        run: |
          python -m pip install --upgrade pip
          pip install -r config/requirements-ci.txt
          pip install -e .

      - name: "🔍 Import Validation"
        run: |
          echo "Testing critical imports..."
          python -c "import app; print('✅ App imports OK')"
          python -c "from app.models.memory import Memory; print('✅ Models import OK')"
          python -c "from app.core.dependencies import get_database; print('✅ Dependencies import OK')"

      - name: "🏥 Health Check"
        run: |
          echo "Testing application health..."
          python -c "
          from app.app import app
          from fastapi.testclient import TestClient
          client = TestClient(app)
          response = client.get('/health')
          assert response.status_code == 200
          print('✅ Health endpoint OK')
          "

      - name: "🧪 Critical Unit Tests"
        run: |
          python -m pytest tests/unit/ \
            -m "smoke or critical" \
            --tb=short \
            --maxfail=3 \
            --timeout=30 \
            -v

      - name: "📊 Generate Smoke Test Report"
        if: always()
        run: |
          echo "## 🔥 Smoke Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Import validation passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Health check passed" >> $GITHUB_STEP_SUMMARY  
          echo "- ✅ Critical tests passed" >> $GITHUB_STEP_SUMMARY
          echo "Duration: $(date -u +%T)" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: "🔒 Security Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: github.event_name == 'pull_request'
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: "🐍 Setup Python"
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "🔒 Bandit Security Scan"
        run: |
          pip install bandit[toml]
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ --severity-level medium

      - name: "📋 Upload Security Report"
        if: always()
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: security-scan-results
          path: bandit-report.json
          retention-days: 7