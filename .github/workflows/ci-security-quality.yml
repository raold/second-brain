# CI: Security & Code Quality - Comprehensive Analysis (<15min)
# Security scanning, code quality checks, and vulnerability assessment
name: "CI: Security & Quality"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  PYTHON_VERSION: "3.11"

jobs:
  code-quality:
    name: "📝 Code Quality Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: "🐍 Setup Python"
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: "📦 Install Quality Tools"
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy bandit safety
          pip install -r config/requirements-ci.txt

      - name: "🔍 Ruff Linting"
        run: |
          echo "Running Ruff linter..."
          ruff check app/ scripts/ --output-format=github --exit-zero
          ruff check app/ scripts/ --output-format=json > ruff-report.json

      - name: "🎨 Black Formatting Check"
        run: |
          echo "Checking code formatting..."
          black --check --diff app/ scripts/ || true
          black --check app/ scripts/

      - name: "📦 Import Sorting Check"
        run: |
          echo "Checking import sorting..."
          isort --check-only --diff app/ scripts/ || true
          isort --check-only app/ scripts/

      - name: "🔬 Type Checking (MyPy)"
        run: |
          echo "Running type analysis..."
          mypy app/ --ignore-missing-imports --show-error-codes --json-report mypy-report || true

      - name: "📊 Code Complexity Analysis"
        run: |
          echo "Analyzing code complexity..."
          python -c "
          import ast
          import os
          from pathlib import Path
          
          def count_complexity(filepath):
              with open(filepath, 'r') as f:
                  try:
                      tree = ast.parse(f.read())
                      return sum(1 for node in ast.walk(tree) if isinstance(node, (ast.If, ast.For, ast.While, ast.With, ast.Try, ast.FunctionDef, ast.AsyncFunctionDef)))
                  except:
                      return 0
          
          total_complexity = 0
          file_count = 0
          for py_file in Path('app').rglob('*.py'):
              complexity = count_complexity(py_file)
              total_complexity += complexity
              file_count += 1
              if complexity > 50:
                  print(f'High complexity: {py_file} ({complexity})')
          
          avg_complexity = total_complexity / file_count if file_count > 0 else 0
          print(f'Average complexity: {avg_complexity:.1f}')
          print(f'Total files analyzed: {file_count}')
          "

      - name: "📋 Upload Quality Reports"
        if: always()
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: code-quality-reports
          path: |
            ruff-report.json
            mypy-report/
          retention-days: 14

  security-analysis:
    name: "🔒 Security Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: "🐍 Setup Python"
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install Security Tools"
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety semgrep pip-audit
          pip install -r config/requirements.txt

      - name: "🛡️ Bandit Security Scan"
        run: |
          echo "Running Bandit security analysis..."
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ --severity-level medium --confidence-level medium

      - name: "🔐 Dependency Vulnerability Scan (Safety)"
        run: |
          echo "Scanning for vulnerable dependencies..."
          safety check --json --output safety-report.json || true
          safety check --short-report

      - name: "🔍 Pip Audit"
        run: |
          echo "Running pip-audit for known vulnerabilities..."
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --desc

      - name: "🕵️ Semgrep Security Analysis"
        if: github.event_name == 'push'  # Only on push to avoid rate limits
        run: |
          echo "Running Semgrep security analysis..."
          semgrep --config=auto app/ --json --output=semgrep-report.json || true
          semgrep --config=auto app/ --error

      - name: "🔎 Secret Detection"
        run: |
          echo "Scanning for potential secrets..."
          python -c "
          import re
          import os
          from pathlib import Path
          
          # Common secret patterns
          patterns = [
              (r'(?i)(password|pwd|passwd)\s*[=:]\s*[\"\\']?[^\s\"\\'\n]{8,}', 'Password'),
              (r'(?i)(api[_-]?key|apikey)\s*[=:]\s*[\"\\']?[a-zA-Z0-9]{16,}', 'API Key'),
              (r'(?i)(secret[_-]?key|secretkey)\s*[=:]\s*[\"\\']?[a-zA-Z0-9]{16,}', 'Secret Key'),
              (r'(?i)(token)\s*[=:]\s*[\"\\']?[a-zA-Z0-9]{20,}', 'Token'),
              (r'postgres://[^\\s]+:[^\\s]+@', 'Database URL'),
              (r'mongodb://[^\\s]+:[^\\s]+@', 'MongoDB URL'),
          ]
          
          found_secrets = []
          for py_file in Path('.').rglob('*.py'):
              if '.venv' in str(py_file) or '__pycache__' in str(py_file):
                  continue
              try:
                  with open(py_file, 'r') as f:
                      content = f.read()
                      for pattern, desc in patterns:
                          matches = re.findall(pattern, content, re.MULTILINE)
                          if matches:
                              found_secrets.append(f'{desc} in {py_file}')
              except:
                  continue
          
          if found_secrets:
              print('⚠️ Potential secrets found:')
              for secret in found_secrets:
                  print(f'  - {secret}')
          else:
              print('✅ No obvious secrets detected')
          "

      - name: "📊 Security Score Calculation"
        run: |
          echo "Calculating security score..."
          python -c "
          import json
          import os
          
          score = 100
          issues = []
          
          # Check bandit results
          if os.path.exists('bandit-report.json'):
              with open('bandit-report.json', 'r') as f:
                  try:
                      bandit_data = json.load(f)
                      high_issues = len([r for r in bandit_data.get('results', []) if r.get('issue_severity') == 'HIGH'])
                      medium_issues = len([r for r in bandit_data.get('results', []) if r.get('issue_severity') == 'MEDIUM'])
                      score -= (high_issues * 15 + medium_issues * 5)
                      if high_issues: issues.append(f'{high_issues} high-severity security issues')
                      if medium_issues: issues.append(f'{medium_issues} medium-severity security issues')
                  except:
                      pass
          
          # Check safety results
          if os.path.exists('safety-report.json'):
              with open('safety-report.json', 'r') as f:
                  try:
                      safety_data = json.load(f)
                      vulnerabilities = len(safety_data.get('vulnerabilities', []))
                      score -= vulnerabilities * 10
                      if vulnerabilities: issues.append(f'{vulnerabilities} vulnerable dependencies')
                  except:
                      pass
          
          score = max(0, score)
          
          print(f'Security Score: {score}/100')
          if issues:
              print('Issues found:')
              for issue in issues:
                  print(f'  - {issue}')
          else:
              print('✅ No major security issues detected')
          
          # Set environment variable for summary
          with open(os.environ['GITHUB_ENV'], 'a') as f:
              f.write(f'SECURITY_SCORE={score}\\n')
          "

      - name: "📋 Upload Security Reports"
        if: always()
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: security-analysis-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json
            semgrep-report.json
          retention-days: 30

  license-compliance:
    name: "⚖️ License Compliance"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: "🐍 Setup Python"
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install License Tools"
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses licensecheck
          pip install -r config/requirements.txt

      - name: "⚖️ License Analysis"
        run: |
          echo "Analyzing package licenses..."
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --summary
          
          echo "Checking for problematic licenses..."
          pip-licenses | grep -i "gpl\|agpl\|copyleft" || echo "✅ No restrictive licenses found"

      - name: "📋 Upload License Report"
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: license-compliance-report
          path: licenses.json
          retention-days: 14

  performance-analysis:
    name: "⚡ Performance Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: "🐍 Setup Python"
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install memory-profiler py-spy
          pip install -r config/requirements-ci.txt
          pip install -e .

      - name: "🔬 Import Performance Analysis"
        run: |
          echo "Analyzing import performance..."
          python -c "
          import time
          import sys
          
          start = time.time()
          import app
          import_time = time.time() - start
          
          print(f'App import time: {import_time:.3f}s')
          if import_time > 2.0:
              print('⚠️ Slow import detected (>2s)')
          else:
              print('✅ Import performance OK')
          "

      - name: "💾 Memory Usage Analysis"
        run: |
          echo "Analyzing memory usage..."
          python -c "
          import psutil
          import os
          
          process = psutil.Process(os.getpid())
          
          # Before import
          mem_before = process.memory_info().rss / 1024 / 1024
          
          # Import app
          import app
          
          # After import  
          mem_after = process.memory_info().rss / 1024 / 1024
          mem_diff = mem_after - mem_before
          
          print(f'Memory usage before import: {mem_before:.1f} MB')
          print(f'Memory usage after import: {mem_after:.1f} MB')
          print(f'Memory increase: {mem_diff:.1f} MB')
          
          if mem_diff > 100:
              print('⚠️ High memory usage detected (>100MB)')
          else:
              print('✅ Memory usage OK')
          "

  summary:
    name: "📊 Quality Summary"
    runs-on: ubuntu-latest
    if: always()
    needs: [code-quality, security-analysis, license-compliance, performance-analysis]
    
    steps:
      - name: "📋 Generate Quality Report"
        run: |
          echo "## 🔒 Security & Quality Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Analysis Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Analysis: ${{ needs.security-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- License Compliance: ${{ needs.license-compliance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Analysis: ${{ needs.performance-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Security score if available
          if [[ -n "${{ env.SECURITY_SCORE }}" ]]; then
            echo "### Security Score: ${{ env.SECURITY_SCORE }}/100" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Overall status
          if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.security-analysis.result }}" == "success" ]]; then
            echo "✅ **Quality Gate: PASSED**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Quality Gate: FAILED**" >> $GITHUB_STEP_SUMMARY
          fi