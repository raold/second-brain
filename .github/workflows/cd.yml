name: CD - Docker Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Validate docker-compose.yml
      run: docker-compose config
    
    - name: Build Docker images
      run: docker-compose build
    
    - name: Save Docker images
      run: |
        docker save second-brain-app:latest | gzip > app-image.tar.gz
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-images
        path: app-image.tar.gz
        retention-days: 1

  docker-test:
    name: Test Docker Deployment
    runs-on: ubuntu-latest
    needs: docker-build
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: secondbrain
          POSTGRES_PASSWORD: changeme
          POSTGRES_DB: secondbrain
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-images
    
    - name: Load Docker images
      run: |
        gunzip -c app-image.tar.gz | docker load
    
    - name: Create test env file
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
        echo "DATABASE_URL=postgresql://secondbrain:changeme@localhost:5432/secondbrain" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
    
    - name: Start Docker containers
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        docker-compose up -d
        
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
    
    - name: Check container health
      run: |
        docker-compose ps
        docker-compose logs app --tail=50
    
    - name: Run deployment tests
      run: |
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/docs
        curl -f http://localhost:8000/metrics
    
    - name: Test API endpoints
      run: |
        # Test health endpoint
        health_status=$(curl -s http://localhost:8000/health | jq -r '.status')
        if [ "$health_status" != "healthy" ]; then
          echo "Health check failed"
          exit 1
        fi
        
        # Test version
        version=$(curl -s http://localhost:8000/health | jq -r '.version')
        if [ "$version" != "3.0.0" ]; then
          echo "Version mismatch: expected 3.0.0, got $version"
          exit 1
        fi
    
    - name: Container logs on failure
      if: failure()
      run: |
        docker-compose logs
        docker-compose ps
    
    - name: Stop containers
      if: always()
      run: docker-compose down -v

  docker-security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deployment-validation:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [docker-test, docker-security-scan]
    
    steps:
    - name: Deployment validation passed
      run: |
        echo "âœ… Docker deployment validation successful!"
        echo "- Docker images build successfully"
        echo "- All containers start and are healthy"
        echo "- API endpoints are accessible"
        echo "- Security scan passed"