# Scheduled Code Quality Review
# Runs weekly to track code quality trends and generate reports
name: "Scheduled: Code Quality Review"

on:
  schedule:
    - cron: '0 9 * * 1'  # Every Monday at 9 AM UTC
  workflow_dispatch:
    inputs:
      generate_report:
        description: 'Generate detailed report'
        required: false
        default: 'true'
        type: boolean

env:
  PYTHON_VERSION: "3.11"

jobs:
  quality-metrics:
    name: "📊 Collect Quality Metrics"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0  # Full history for trend analysis

      - name: "🐍 Setup Python"
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install Analysis Tools"
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort radon pylint bandit
          pip install matplotlib pandas tabulate
          pip install -r config/requirements-ci.txt

      - name: "📈 Code Quality Metrics"
        run: |
          mkdir -p reports
          
          # Ruff analysis
          echo "Running Ruff analysis..."
          ruff check app/ tests/ --statistics > reports/ruff-stats.txt || true
          ruff check app/ tests/ --output-format=json > reports/ruff-report.json || true
          
          # Count issues by type
          echo "## Linting Issues Summary" > reports/quality-summary.md
          echo "" >> reports/quality-summary.md
          echo "| Error Code | Count | Description |" >> reports/quality-summary.md
          echo "|------------|-------|-------------|" >> reports/quality-summary.md
          ruff check app/ tests/ --statistics | sort -rn | head -20 | while read line; do
            count=$(echo $line | awk '{print $1}')
            code=$(echo $line | awk '{print $2}')
            echo "| $code | $count | $(ruff rule $code --format=markdown | head -1) |" >> reports/quality-summary.md
          done || true

      - name: "🔍 Complexity Analysis"
        run: |
          echo "Analyzing code complexity..."
          
          # Cyclomatic complexity
          echo "" >> reports/quality-summary.md
          echo "## Complexity Analysis" >> reports/quality-summary.md
          echo "" >> reports/quality-summary.md
          echo "### High Complexity Functions (CC > 10)" >> reports/quality-summary.md
          echo "" >> reports/quality-summary.md
          
          radon cc app/ -s -j > reports/complexity.json || true
          
          python -c "
          import json
          with open('reports/complexity.json', 'r') as f:
              data = json.load(f)
          
          complex_functions = []
          for module, items in data.items():
              for item in items:
                  if item['complexity'] > 10:
                      complex_functions.append({
                          'file': module,
                          'function': item['name'],
                          'complexity': item['complexity'],
                          'rank': item['rank']
                      })
          
          complex_functions.sort(key=lambda x: x['complexity'], reverse=True)
          
          with open('reports/quality-summary.md', 'a') as f:
              f.write('| File | Function | Complexity | Rank |\\n')
              f.write('|------|----------|------------|------|\\n')
              for func in complex_functions[:20]:
                  f.write(f\"| {func['file'].split('/')[-1]} | {func['function']} | {func['complexity']} | {func['rank']} |\\n\")
          " || true

      - name: "📏 Code Size Metrics"
        run: |
          echo "" >> reports/quality-summary.md
          echo "## Code Size Metrics" >> reports/quality-summary.md
          echo "" >> reports/quality-summary.md
          
          # Count lines of code
          echo "### Lines of Code" >> reports/quality-summary.md
          echo "" >> reports/quality-summary.md
          echo "| Component | Python Files | Lines | Blank | Comment |" >> reports/quality-summary.md
          echo "|-----------|--------------|-------|-------|---------|" >> reports/quality-summary.md
          
          for dir in app tests scripts; do
            if [ -d "$dir" ]; then
              stats=$(find $dir -name "*.py" -exec wc -l {} + | tail -1)
              files=$(find $dir -name "*.py" | wc -l)
              total=$(echo $stats | awk '{print $1}')
              echo "| $dir | $files | $total | - | - |" >> reports/quality-summary.md
            fi
          done

      - name: "🏗️ Technical Debt Analysis"
        run: |
          echo "" >> reports/quality-summary.md
          echo "## Technical Debt Indicators" >> reports/quality-summary.md
          echo "" >> reports/quality-summary.md
          
          # Count TODOs and FIXMEs
          echo "### Code Comments" >> reports/quality-summary.md
          echo "" >> reports/quality-summary.md
          
          TODO_COUNT=$(grep -r "TODO" app/ tests/ --include="*.py" | wc -l || echo 0)
          FIXME_COUNT=$(grep -r "FIXME" app/ tests/ --include="*.py" | wc -l || echo 0)
          HACK_COUNT=$(grep -r "HACK" app/ tests/ --include="*.py" | wc -l || echo 0)
          XXX_COUNT=$(grep -r "XXX" app/ tests/ --include="*.py" | wc -l || echo 0)
          
          echo "| Marker | Count |" >> reports/quality-summary.md
          echo "|--------|-------|" >> reports/quality-summary.md
          echo "| TODO | $TODO_COUNT |" >> reports/quality-summary.md
          echo "| FIXME | $FIXME_COUNT |" >> reports/quality-summary.md
          echo "| HACK | $HACK_COUNT |" >> reports/quality-summary.md
          echo "| XXX | $XXX_COUNT |" >> reports/quality-summary.md

      - name: "📊 Generate Trend Report"
        if: github.event.inputs.generate_report == 'true' || github.event_name == 'schedule'
        run: |
          echo "" >> reports/quality-summary.md
          echo "## Weekly Trend Analysis" >> reports/quality-summary.md
          echo "" >> reports/quality-summary.md
          echo "Generated on: $(date)" >> reports/quality-summary.md
          
          # Calculate quality score
          python -c "
          import json
          
          score = 100
          
          # Deduct for linting issues
          try:
              with open('reports/ruff-report.json', 'r') as f:
                  issues = len(json.load(f))
                  score -= min(issues // 10, 30)  # Max 30 point deduction
          except:
              pass
          
          # Deduct for complexity
          try:
              with open('reports/complexity.json', 'r') as f:
                  data = json.load(f)
                  high_complexity = sum(1 for m in data.values() for i in m if i['complexity'] > 10)
                  score -= min(high_complexity * 2, 20)  # Max 20 point deduction
          except:
              pass
          
          print(f'\\n### Overall Quality Score: {score}/100')
          
          if score >= 90:
              print('Rating: ⭐⭐⭐⭐⭐ Excellent')
          elif score >= 80:
              print('Rating: ⭐⭐⭐⭐ Good')
          elif score >= 70:
              print('Rating: ⭐⭐⭐ Fair')
          elif score >= 60:
              print('Rating: ⭐⭐ Needs Improvement')
          else:
              print('Rating: ⭐ Poor')
          " >> reports/quality-summary.md

      - name: "📤 Upload Quality Reports"
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: code-quality-report-${{ github.run_number }}
          path: reports/
          retention-days: 90

      - name: "💬 Post Summary to PR"
        if: github.event_name == 'pull_request'
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('reports/quality-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 Code Quality Report\n\n${summary}`
            });

      - name: "📧 Send Report (if configured)"
        if: github.event_name == 'schedule' && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # Extract key metrics
          SCORE=$(grep "Overall Quality Score" reports/quality-summary.md | grep -o '[0-9]\+/100' || echo "N/A")
          ISSUES=$(wc -l < reports/ruff-report.json || echo "0")
          
          # Send to Slack
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"Weekly Code Quality Report\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Weekly Code Quality Report*\\n\\nQuality Score: ${SCORE}\\nTotal Issues: ${ISSUES}\"
                  }
                }
              ]
            }" \
            $SLACK_WEBHOOK_URL || true

  automated-fixes:
    name: "🔧 Automated Fixes"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: quality-metrics
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "🐍 Setup Python"
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install Tools"
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort

      - name: "🔧 Apply Automated Fixes"
        run: |
          # Run ruff fixes
          echo "Applying ruff fixes..."
          ruff check app/ tests/ scripts/ --fix --unsafe-fixes || true
          
          # Run black formatting
          echo "Applying black formatting..."
          black app/ tests/ scripts/ || true
          
          # Sort imports
          echo "Sorting imports..."
          isort app/ tests/ scripts/ || true

      - name: "📝 Create PR with Fixes"
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "🔧 Apply automated code quality fixes"
          title: "🔧 Automated Code Quality Improvements"
          body: |
            ## 🤖 Automated Code Quality Fixes
            
            This PR contains automated fixes from the weekly code quality review:
            
            - ✅ Applied ruff auto-fixes
            - ✅ Applied black code formatting
            - ✅ Sorted imports with isort
            
            Please review the changes before merging.
          branch: automated-quality-fixes
          delete-branch: true