name: Second Brain v2.0.0 CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'archive/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'archive/**'

permissions:
  contents: read
  packages: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
      python-cache-key: ${{ steps.python-cache-key.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Generate cache keys
        id: cache-key
        run: |
          echo "value=${{ hashFiles('requirements-minimal.txt', 'ruff.toml', 'pytest.ini') }}" >> $GITHUB_OUTPUT

      - name: Generate Python cache key
        id: python-cache-key
        run: |
          echo "value=${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements-minimal.txt') }}" >> $GITHUB_OUTPUT

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ steps.python-cache-key.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-minimal.txt
          pip install pytest pytest-cov pytest-asyncio ruff

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.python-cache-key }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Cache ruff cache
        uses: actions/cache@v4
        with:
          path: .ruff_cache
          key: ${{ runner.os }}-ruff-${{ hashFiles('ruff.toml') }}
          restore-keys: |
            ${{ runner.os }}-ruff-

      - name: Run ruff check
        run: ruff check . --output-format=github

      - name: Run ruff format check
        run: ruff format --check .

  test:
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.python-cache-key }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-minimal.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Cache pytest cache
        uses: actions/cache@v4
        with:
          path: .pytest_cache
          key: ${{ runner.os }}-pytest-${{ hashFiles('pytest.ini') }}
          restore-keys: |
            ${{ runner.os }}-pytest-

      - name: Set up environment
        run: |
          # Create test environment file
          cat > .env << EOF
          POSTGRES_USER=test_user
          POSTGRES_PASSWORD=test_password
          POSTGRES_HOST=localhost
          POSTGRES_PORT=5432
          POSTGRES_DB=test_db
          OPENAI_API_KEY=test_key_for_ci
          API_TOKENS=test_token_for_ci,another_test_token
          HOST=0.0.0.0
          PORT=8000
          EOF

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Initialize test database
        run: |
          python setup_db.py
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_db
          OPENAI_API_KEY: test_key_for_ci

      - name: Run mock database tests
        run: |
          python test_mock_database.py

      - name: Run database setup tests
        run: |
          python test_db_setup.py
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

      - name: Run main test suite
        run: |
          python -m pytest test_refactored.py::TestAPI::test_health_check -v
          python -m pytest test_refactored.py::TestAPI::test_authentication_required -v
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          OPENAI_API_KEY: test_key_for_ci
          API_TOKENS: test_token_for_ci,another_test_token

      - name: Run application health check
        run: |
          # Start the application in background
          python -m app.app &
          APP_PID=$!
          
          # Wait for application to start
          sleep 5
          
          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1
          
          # Cleanup
          kill $APP_PID
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          OPENAI_API_KEY: test_key_for_ci
          API_TOKENS: test_token_for_ci,another_test_token

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          load: true

      - name: Test Docker image
        run: |
          # Test that the image can be built and starts correctly
          docker run --rm -d --name test-container \
            -e DATABASE_URL=postgresql://user:pass@localhost:5432/db \
            -e OPENAI_API_KEY=test_key \
            -e API_TOKENS=test_token \
            -p 8001:8000 \
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint (should fail gracefully without real DB)
          docker logs test-container
          
          # Cleanup
          docker stop test-container || true

      - name: Push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deployment-ready:
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment ready notification
        run: |
          echo "ðŸš€ Second Brain v2.0.0 is ready for deployment!"
          echo "âœ… Linting passed"
          echo "âœ… Tests passed"
          echo "âœ… Docker build successful"
          echo "ðŸ“¦ Image: ghcr.io/${{ github.repository }}:${{ github.sha }}"
