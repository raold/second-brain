name: Second Brain v2.8.x CI/CD Pipeline

on:
  push:
    branches: [ main, develop, release/*, feature/* ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'archive/**'
      - 'examples/**'
      - 'scripts/**'
      - 'static/**'
      - '*.html'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for emergency fixes only)'
        type: boolean
        default: false
      deploy_env:
        description: 'Deploy to environment after successful build'
        type: choice
        options:
          - none
          - staging
          - production
        default: none

permissions:
  contents: read
  packages: write
  pages: write
  id-token: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  USE_MOCK_DATABASE: 'true'
  RUFF_VERSION: '0.12.4'

jobs:
  # ============================================
  # QUALITY CHECKS
  # ============================================
  
  quality-checks:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build_number }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version detection

      - name: Extract version information
        id: version
        run: |
          VERSION=$(python -c "from app.version import __version__; print(__version__)")
          BUILD_NUMBER="${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "🏷️ Version: $VERSION (Build: $BUILD_NUMBER)"

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install ruff==${{ env.RUFF_VERSION }} mypy black isort

      - name: Run ruff linting
        id: ruff
        run: |
          echo "🔍 Running ruff checks..."
          ruff check . --output-format=github --exit-zero > ruff-report.txt
          if [ -s ruff-report.txt ]; then
            echo "has_issues=true" >> $GITHUB_OUTPUT
            cat ruff-report.txt
          else
            echo "has_issues=false" >> $GITHUB_OUTPUT
            echo "✅ No linting issues found"
          fi

      - name: Check code formatting
        run: |
          echo "🎨 Checking code formatting..."
          ruff format --check . || echo "::warning::Code formatting issues found. Run 'ruff format .' to fix."

      - name: Type checking with mypy
        continue-on-error: true
        run: |
          echo "🔍 Running type checks..."
          pip install types-redis types-requests
          mypy app --ignore-missing-imports --no-strict-optional || echo "::warning::Type checking issues found"

      - name: Security scan with bandit
        continue-on-error: true
        run: |
          echo "🔒 Running security scan..."
          pip install bandit[toml]
          bandit -r app -ll -f json -o bandit-report.json || true
          if [ -f bandit-report.json ]; then
            python -m json.tool bandit-report.json
          fi

      - name: Check for hardcoded secrets
        run: |
          echo "🔑 Scanning for hardcoded secrets..."
          pip install detect-secrets
          detect-secrets scan --baseline .secrets.baseline || detect-secrets scan > .secrets.new
          if [ -f .secrets.new ]; then
            echo "::warning::Potential secrets detected. Review .secrets.new file"
          fi

  # ============================================
  # TESTING
  # ============================================
  
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality-checks
    if: ${{ !inputs.skip_tests }}
    
    strategy:
      fail-fast: false
      matrix:
        test-group:
          - name: "Unit Tests"
            path: "tests/unit"
            marks: "not integration and not slow"
          - name: "Integration Tests"
            path: "tests/integration"
            marks: "integration"
          - name: "Migration Tests"
            path: "tests/unit/test_*migration*.py"
            marks: ""
          - name: "API Tests"
            path: "tests/"
            marks: "api or endpoint"
    
    services:
      postgres:
        image: ankane/pgvector:v0.5.1
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_secondbrain
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client libpq-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-xdist pytest-timeout httpx

      - name: Set up test environment
        run: |
          cat > .env.test << EOF
          DATABASE_URL=postgresql://test_user:test_pass@localhost:5432/test_secondbrain
          REDIS_URL=redis://localhost:6379
          USE_MOCK_DATABASE=${{ matrix.test-group.name == 'Unit Tests' && 'true' || 'false' }}
          OPENAI_API_KEY=test_key_${{ github.run_id }}
          API_TOKENS=test_token_1,test_token_2
          ENVIRONMENT=test
          LOG_LEVEL=DEBUG
          EOF

      - name: Initialize database
        if: matrix.test-group.name != 'Unit Tests'
        run: |
          PGPASSWORD=test_pass psql -h localhost -U test_user -d test_secondbrain -c "CREATE EXTENSION IF NOT EXISTS vector;"
          PGPASSWORD=test_pass psql -h localhost -U test_user -d test_secondbrain -c "CREATE EXTENSION IF NOT EXISTS pg_trgm;"

      - name: Run ${{ matrix.test-group.name }}
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "🧪 Running ${{ matrix.test-group.name }}..."
          
          # Build pytest command
          PYTEST_CMD="python -m pytest ${{ matrix.test-group.path }} -v"
          PYTEST_CMD="$PYTEST_CMD --tb=short --maxfail=5 --timeout=300"
          PYTEST_CMD="$PYTEST_CMD --cov=app --cov-report=xml --cov-report=term-missing"
          
          if [ -n "${{ matrix.test-group.marks }}" ]; then
            PYTEST_CMD="$PYTEST_CMD -m \"${{ matrix.test-group.marks }}\""
          fi
          
          # Run tests
          eval $PYTEST_CMD || echo "::warning::Some tests in ${{ matrix.test-group.name }} failed"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-group.name }}
          name: ${{ matrix.test-group.name }}-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  # ============================================
  # BUILD & PACKAGE
  # ============================================
  
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [quality-checks, test-suite]
    if: always() && needs.quality-checks.result == 'success'
    
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ needs.quality-checks.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.quality-checks.outputs.version }}
            type=raw,value=${{ needs.quality-checks.outputs.version }}-build.${{ needs.quality-checks.outputs.build_number }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ needs.quality-checks.outputs.version }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================
  # DOCUMENTATION & STATIC SITE
  # ============================================
  
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install documentation dependencies
        run: |
          pip install mkdocs mkdocs-material mkdocstrings[python] pymdown-extensions

      - name: Build API documentation
        run: |
          echo "📚 Generating API documentation..."
          python scripts/generate_api_docs.py || echo "No doc generator found, skipping"

      - name: Prepare GitHub Pages content
        run: |
          mkdir -p _site
          
          # Copy static files
          cp -r static/* _site/ 2>/dev/null || true
          cp index.html _site/ 2>/dev/null || true
          cp -r *.html _site/ 2>/dev/null || true
          
          # Generate version info
          cat > _site/version.json << EOF
          {
            "version": "${{ needs.quality-checks.outputs.version }}",
            "build": "${{ needs.quality-checks.outputs.build_number }}",
            "commit": "${{ github.sha }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site/

  # ============================================
  # DEPLOYMENT
  # ============================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker, test-suite]
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' &&
      (success() || inputs.skip_tests)
    environment:
      name: staging
      url: https://staging.second-brain.app
    
    steps:
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying version ${{ needs.quality-checks.outputs.version }} to staging..."
          echo "📦 Image: ${{ needs.build-docker.outputs.image }}"
          # Add actual deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, deploy-staging]
    if: |
      github.event_name == 'workflow_dispatch' && 
      inputs.deploy_env == 'production'
    environment:
      name: production
      url: https://second-brain.app
    
    steps:
      - name: Deploy to production
        run: |
          echo "🚀 Deploying version ${{ needs.quality-checks.outputs.version }} to production..."
          echo "📦 Image: ${{ needs.build-docker.outputs.image }}"
          # Add actual deployment commands here

  deploy-pages:
    name: Deploy GitHub Pages
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # ============================================
  # NOTIFICATIONS
  # ============================================
  
  notify-status:
    name: Pipeline Status
    runs-on: ubuntu-latest
    needs: [quality-checks, test-suite, build-docker]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "# 🚀 Second Brain v${{ needs.quality-checks.outputs.version }} Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Status badges
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.quality-checks.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | ${{ needs.test-suite.result == 'success' && '✅' || needs.test-suite.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.build-docker.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build:** #${{ needs.quality-checks.outputs.build_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY