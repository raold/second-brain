# Second Brain CI/CD Pipeline
# Comprehensive automated testing, security, and deployment pipeline

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Pre-flight checks
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_run_tests: ${{ steps.changes.outputs.should_run }}
      python_changed: ${{ steps.changes.outputs.python }}
      docker_changed: ${{ steps.changes.outputs.docker }}
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check for changes
        id: changes
        run: |
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "python=true" >> $GITHUB_OUTPUT
          echo "docker=true" >> $GITHUB_OUTPUT

  # Smoke tests - Critical path validation (< 60s)
  smoke:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should_run_tests == 'true'
    timeout-minutes: 5
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: secondbrain
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: secondbrain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r config/requirements.txt
          pip install -r config/requirements-ci-cd.txt
          
      - name: Run smoke tests
        env:
          DATABASE_URL: postgresql://secondbrain:test_password@localhost:5432/secondbrain_test
          REDIS_URL: redis://localhost:6379/1
          CI_MODE: true
        run: |
          python scripts/ci_runner.py --stage smoke --exit-on-failure
          
      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results
          path: |
            ci_reports/
            htmlcov/
          retention-days: 7

  # Fast feedback tests - Core functionality (< 5min)  
  fast-feedback:
    name: Fast Feedback Tests
    runs-on: ubuntu-latest
    needs: [preflight, smoke]
    if: needs.smoke.result == 'success'
    timeout-minutes: 8
    strategy:
      matrix:
        test-group: [unit, integration-basic, api-core]
        
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: secondbrain
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: secondbrain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r config/requirements.txt
          pip install -r config/requirements-ci-cd.txt
          
      - name: Run fast feedback tests
        env:
          DATABASE_URL: postgresql://secondbrain:test_password@localhost:5432/secondbrain_test
          REDIS_URL: redis://localhost:6379/1
          CI_MODE: true
          PYTEST_WORKERS: auto
        run: |
          python scripts/ci_runner.py --stage fast --group ${{ matrix.test-group }} --exit-on-failure
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: fast-feedback-${{ matrix.test-group }}-results
          path: |
            ci_reports/
            htmlcov/
            coverage.xml
          retention-days: 7

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: preflight
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r config/requirements-ci-cd.txt
          
      - name: Run linting
        run: |
          ruff check . --output-format=github
          black --check . --diff
          isort --check-only . --diff
          
      - name: Run type checking
        run: |
          mypy app/ --show-error-codes --no-error-summary
          
      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            lint_report.json
            mypy_results/
          retention-days: 7

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: preflight
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r config/requirements.txt
          pip install -r config/requirements-ci-cd.txt
          
      - name: Run security scans
        run: |
          python scripts/ci_runner.py --stage security --save-report security_report.json
          
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            security_report.json
            bandit_results/
            safety_results/
          retention-days: 30

  # Comprehensive tests - Full validation (< 15min)
  comprehensive:
    name: Comprehensive Tests
    runs-on: ubuntu-latest
    needs: [fast-feedback, quality]
    if: needs.fast-feedback.result == 'success' && needs.quality.result == 'success'
    timeout-minutes: 20
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: secondbrain
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: secondbrain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r config/requirements.txt
          pip install -r config/requirements-ci-cd.txt
          
      - name: Run comprehensive tests
        env:
          DATABASE_URL: postgresql://secondbrain:test_password@localhost:5432/secondbrain_test
          REDIS_URL: redis://localhost:6379/1
          CI_MODE: true
          PYTEST_WORKERS: auto
          COVERAGE_THRESHOLD: 80
        run: |
          python scripts/ci_runner.py --stage comprehensive --save-report comprehensive_report.json
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          
      - name: Upload comprehensive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-test-results
          path: |
            comprehensive_report.json
            ci_reports/
            htmlcov/
            coverage.xml
            coverage.json
          retention-days: 14

  # Performance tests - Benchmarks (< 20min)
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: comprehensive
    if: needs.comprehensive.result == 'success'
    timeout-minutes: 25
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: secondbrain
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: secondbrain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r config/requirements.txt
          pip install -r config/requirements-ci-cd.txt
          
      - name: Run performance tests
        env:
          DATABASE_URL: postgresql://secondbrain:test_password@localhost:5432/secondbrain_test
          REDIS_URL: redis://localhost:6379/1
          CI_MODE: true
          LOAD_TEST_DURATION: 60
          LOAD_TEST_USERS: 10
        run: |
          python scripts/ci_runner.py --stage performance --save-report performance_report.json
          
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            performance_report.json
            locust_reports/
            profiling_results/
          retention-days: 30

  # Docker build and test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.docker_changed == 'true'
    timeout-minutes: 20
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker images
        run: |
          docker-compose -f docker-compose.test.yml build
          
      - name: Run Docker tests
        run: |
          docker-compose -f docker-compose.test.yml up --abort-on-container-exit
          
      - name: Cleanup Docker
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # Generate final report
  report:
    name: Generate Final Report
    runs-on: ubuntu-latest
    needs: [smoke, fast-feedback, quality, security, comprehensive, performance]
    if: always()
    timeout-minutes: 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 markdown rich tabulate
          
      - name: Generate final report
        run: |
          python scripts/generate_ci_final_report.py \
            --artifacts-dir artifacts/ \
            --output final_ci_report.html \
            --json-output final_ci_report.json
            
      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: final-ci-report
          path: |
            final_ci_report.html
            final_ci_report.json
          retention-days: 90
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('final_ci_report.json', 'utf8'));
            
            const comment = `## CI/CD Pipeline Results 🤖
            
            **Overall Status**: ${report.overall_status}
            **Total Duration**: ${report.total_duration}
            
            ### Test Results Summary
            - **Smoke Tests**: ${report.smoke.status}
            - **Fast Feedback**: ${report.fast_feedback.status}  
            - **Code Quality**: ${report.quality.status}
            - **Security Scan**: ${report.security.status}
            - **Comprehensive**: ${report.comprehensive.status}
            - **Performance**: ${report.performance.status}
            
            ### Coverage
            - **Line Coverage**: ${report.coverage.line}%
            - **Branch Coverage**: ${report.coverage.branch}%
            
            [View Full Report](${report.report_url})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });