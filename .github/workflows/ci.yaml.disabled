name: Second Brain v2.8.x CI Pipeline (Legacy)

on:
  push:
    branches: [ main, develop, testing, feature/* ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'archive/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'archive/**'

permissions:
  contents: read
  packages: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  ENVIRONMENT: 'ci'
  USE_MOCK_DATABASE: 'true'
  DEBUG: 'false'
  LOG_LEVEL: 'WARNING'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
      python-cache-key: ${{ steps.python-cache-key.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Generate cache keys
        id: cache-key
        run: |
          echo "value=${{ hashFiles('requirements.txt', 'ruff.toml', 'pytest.ini') }}" >> $GITHUB_OUTPUT

      - name: Generate Python cache key
        id: python-cache-key
        run: |
          echo "value=${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}" >> $GITHUB_OUTPUT

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ steps.python-cache-key.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio ruff

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.python-cache-key }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Cache ruff cache
        uses: actions/cache@v4
        with:
          path: .ruff_cache
          key: ${{ runner.os }}-ruff-${{ hashFiles('ruff.toml') }}
          restore-keys: |
            ${{ runner.os }}-ruff-

      - name: Run ruff check
        run: ruff check . --output-format=github

      - name: Run ruff format check
        run: ruff format --check .

  test:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.python-cache-key }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Cache pytest cache
        uses: actions/cache@v4
        with:
          path: .pytest_cache
          key: ${{ runner.os }}-pytest-${{ hashFiles('pytest.ini') }}
          restore-keys: |
            ${{ runner.os }}-pytest-

      - name: Set up environment and Python path
        run: |
          # Set PYTHONPATH to include current directory for app module imports
          echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
          
          # Create test environment file for local testing
          cat > .env << EOF
          ENVIRONMENT=ci
          USE_MOCK_DATABASE=true
          DEBUG=false
          LOG_LEVEL=WARNING
          API_TOKENS=test_token_for_ci,another_test_token
          OPENAI_API_KEY=test_key_for_ci
          EOF

      - name: Run test suite
        run: |
          export PYTHONPATH=$PWD
          python -m pytest tests/ -v --cov=app --cov-report=term-missing \
            --ignore=tests/unit/test_database_basic.py \
            --ignore=tests/comprehensive/test_bulk_operations_comprehensive.py \
            -k "not test_client_initialization_with_api_key"
        env:
          ENVIRONMENT: ci
          USE_MOCK_DATABASE: 'true'
          DEBUG: 'false'
          LOG_LEVEL: 'WARNING'
          API_TOKENS: test_token_for_ci,another_test_token
          OPENAI_API_KEY: test_key_for_ci

      - name: Run application health check
        run: |
          # Set Python path and start the application in background
          export PYTHONPATH=$PWD
          python -m app.app &
          APP_PID=$!
          
          # Wait for application to start
          sleep 5
          
          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1
          
          # Cleanup
          kill $APP_PID
        env:
          ENVIRONMENT: ci
          USE_MOCK_DATABASE: 'true'
          OPENAI_API_KEY: test_key_for_ci
          API_TOKENS: test_token_for_ci,another_test_token
          DEBUG: 'false'
          LOG_LEVEL: 'WARNING'

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          load: true

      - name: Test Docker image
        run: |
          # Test that the image can be built and starts correctly
          docker run --rm -d --name test-container \
            -e DATABASE_URL=postgresql://user:pass@localhost:5432/db \
            -e OPENAI_API_KEY=test_key \
            -e API_TOKENS=test_token \
            -p 8001:8000 \
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint (should fail gracefully without real DB)
          docker logs test-container
          
          # Cleanup
          docker stop test-container || true

      - name: Push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deployment-ready:
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment ready notification
        run: |
          echo "ðŸš€ Second Brain v2.0.0 is ready for deployment!"
          echo "âœ… Linting passed"
          echo "âœ… Tests passed"
          echo "âœ… Docker build successful"
          echo "ðŸ“¦ Image: ghcr.io/${{ github.repository }}:${{ github.sha }}"
