{
  "permissions": {
    "allow": [
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(set PYTHONPATH=.)",
      "Bash(set USE_MOCK_DATABASE=true)",
      "Bash(find:*)",
      "Bash(true)",
      "Bash(mv:*)",
      "Bash(git commit:*)",
      "Bash(del \"C:\\Users\\dro\\second-brain\\verify_version_tests.py\")",
      "Bash(set PYTHONIOENCODING=utf-8)",
      "Bash(git merge:*)",
      "Bash(git push:*)",
      "Bash(git checkout:*)",
      "Bash(python:*)",
      "Bash(git add:*)",
      "Bash(PYTHONPATH=. python -m pytest test_integration_features.py -v --tb=short)",
      "Bash(PYTHONPATH=. python -m pytest tests/ -v --tb=short -x)",
      "Bash(PYTHONPATH=. python -c \"from app.routes.graph_routes import router; print(''graph_routes import successful'')\")",
      "Bash(PYTHONPATH=. python -c \"from app.routes.graph_routes import router; print(''graph_routes import successful'')\")",
      "Bash(PYTHONPATH=. python -c \"from app.routes.analysis_routes import router; print(''analysis_routes import successful'')\")",
      "Bash(PYTHONPATH=. python -m pytest test_integration_features.py test_knowledge_graph_minimal.py test_reasoning_minimal.py -v)",
      "Bash(USE_MOCK_DATABASE=true PYTHONPATH=. python -m pytest test_integration_features.py test_knowledge_graph_minimal.py test_reasoning_minimal.py -v)",
      "Bash(USE_MOCK_DATABASE=true PYTHONPATH=. python test_integration_features.py)",
      "Bash(USE_MOCK_DATABASE=true PYTHONPATH=. python -c \"from app.app import app; print(''âœ… App imports successfully with advanced-analysis features'')\")",
      "Bash(USE_MOCK_DATABASE=true PYTHONPATH=. python -c \"from app.app import app; print(''âœ… App imports successfully with advanced-analysis features'')\")",
      "Bash(USE_MOCK_DATABASE=true PYTHONPATH=. python -m pytest test_integration_features.py -v)",
      "Bash(USE_MOCK_DATABASE=true PYTHONPATH=. python -c \"\nimport asyncio\nfrom app.app import app\nfrom app.ingestion.entity_extractor import EntityExtractor\nfrom app.ingestion.topic_classifier import TopicClassifier\nfrom app.ingestion.domain_classifier import DomainClassifier\nfrom app.routes.graph_routes import router as graph_router\nfrom app.routes.analysis_routes import router as analysis_router\n\nprint(''âœ… All new modules import successfully'')\nprint(f''âœ… Graph routes: {len(graph_router.routes)} endpoints'')\nprint(f''âœ… Analysis routes: {len(analysis_router.routes)} endpoints'')\n\")",
      "Bash(USE_MOCK_DATABASE=true PYTHONPATH=.:*)",
      "Bash(gh release create:*)",
      "Bash(--title \"v2.8.1 - Advanced Content Analysis & NLP\" )",
      "Bash(--notes-file RELEASE_NOTES_v2.8.1.md )",
      "Bash(--latest)",
      "Bash(ruff check:*)",
      "Bash(make lint:*)",
      "Bash(.venv/bin/ruff check .)",
      "Bash(venv/bin/ruff check:*)",
      "Bash(gh run view:*)",
      "Bash(venv/bin/pip install:*)",
      "Bash(venv/bin/python -m pytest tests/unit/test_version_system.py::TestVersionSystem::test_increment_version -v)",
      "Bash(venv/bin/python -m pytest tests/unit/test_version_system.py::TestVersionSystem::test_is_version_compatible -v)",
      "Bash(venv/bin/python -m pytest tests/unit/test_memory_migrations.py -v)",
      "Bash(venv/bin/python -m pytest tests/unit/test_memory_migrations.py::TestAddMemoryTypeClassification::test_get_memories_to_migrate -v)",
      "Bash(does not support the asynchronous context manager protocol\".\n\nðŸ¤– Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(venv/bin/python -m pytest tests/unit/test_memory_migrations.py tests/unit/test_database_migrations.py tests/unit/test_version_system.py -v)",
      "Bash(venv/bin/python -m pytest tests/unit/test_version_system.py::TestVersionManagerIntegration::test_version_manager_functionality -v)",
      "Bash(.venvScriptspython.exe -m pytest tests/unit/ -v)",
      "Bash(.venv\\Scripts\\python.exe -m pytest tests/unit/ -v)",
      "Bash(make test:*)",
      "Bash(PYTHONPATH=. pytest --cov=app tests/)",
      "Bash(curl:*)",
      "Bash(C:Usersdrosecond-brain.venvScriptspython.exe -m uvicorn app.app:app --reload --port 8001)",
      "Bash(C:Usersdrosecond-brain.venvScriptspython.exe test_server.py)",
      "Bash(C:UsersdroAppDataLocalProgramsPythonPython310python.exe -m pytest tests/unit/domain -v)",
      "Bash(where python)",
      "Bash(C:Usersdrosecond-brain.venvScriptspython.exe -m pytest tests/infrastructure/test_repositories.py -v)",
      "Bash(.venvScriptspython.exe -m pytest tests/infrastructure/test_repositories.py -v)",
      "Bash(dir:*)",
      "Bash(move:*)",
      "Bash(rm:*)",
      "Bash(gh:*)",
      "Bash(git pull:*)",
      "Bash(git stash:*)",
      "Bash(pytest:*)",
      "Bash(C:Usersdrosecond-brain.venvScriptspython.exe -m pytest tests/unit/ -v)",
      "Bash(./.venv/Scripts/python.exe -m pytest tests/unit/ -v)",
      "Bash(.venv\\Scripts\\activate)",
      "Bash(pip install:*)",
      "Bash(.venv\\\\Scripts\\\\python.exe -m pip install:*)",
      "Bash(.venv/Scripts/python.exe -m pip install:*)",
      "Bash(grep:*)",
      "Bash(.venv/Scripts/python.exe test_env.py:*)",
      "Bash(.venv/Scripts/python.exe -m pytest tests/unit/test_config.py -v)",
      "Bash(.venv/Scripts/python.exe -m pip uninstall:*)",
      "Bash(.venv/Scripts/python.exe scripts/validate_ci.py:*)",
      "Bash(.venv/Scripts/python.exe -m pytest tests/unit/test_basic_modules.py -v)",
      "Bash(.venv/Scripts/python.exe validate_environment.py:*)",
      "Bash(.venv/Scripts/python.exe:*)",
      "Bash(docker pull:*)",
      "Bash(docker search:*)",
      "Bash(docker-compose:*)",
      "Bash(docker logs:*)",
      "Bash(docker exec:*)",
      "Bash(timeout:*)",
      "Bash(.venvScriptspython.exe -m pip install aiofiles==23.2.1 python-magic==0.4.27 PyPDF2==3.0.1 python-docx==0.8.11)",
      "Bash(\".venv/Scripts/python.exe\" -m pip install aiofiles==23.2.1 python-magic==0.4.27 PyPDF2==3.0.1 python-docx==0.8.11)",
      "Bash(\"C:\\Users\\dro\\AppData\\Local\\Programs\\Python\\Python310\\python.exe\" --version)",
      "Bash(\"C:\\Users\\dro\\AppData\\Local\\Programs\\Python\\Python310\\python.exe\" -m pip install aiofiles==23.2.1 python-magic==0.4.27 PyPDF2==3.0.1 python-docx==0.8.11 --target .venvLibsite-packages)",
      "Bash(\"C:\\Users\\dro\\AppData\\Local\\Programs\\Python\\Python310\\python.exe\" scripts/test_runner.py --validation)",
      "Bash(\"C:\\Users\\dro\\AppData\\Local\\Programs\\Python\\Python310\\python.exe\" testsvalidationvalidate_ci_ready.py)",
      "Bash(\"C:\\Users\\dro\\AppData\\Local\\Programs\\Python\\Python310\\python.exe\" tests/validation/validate_ci_ready.py)",
      "Bash(\"C:\\Users\\dro\\AppData\\Local\\Programs\\Python\\Python310\\python.exe\" scripts/test_runner.py --all)",
      "Bash(git config:*)",
      "Bash(cat:*)",
      "Bash(git reset:*)",
      "Bash(docker volume:*)",
      "Bash(chmod:*)",
      "Bash(.venv\\Scripts\\python.exe scripts/test_runner.py:*)",
      "Bash(.venv\\Scripts\\python.exe scripts/test_runner.py:*)",
      "Bash(.venv\\Scripts\\python.exe scripts\\test_runner.py:*)",
      "Bash(C:Usersdrosecond-brain.venvScriptspython.exe scriptstest_runner.py --unit)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" scriptstest_runner.py --unit)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" scripts/test_runner.py --unit)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -m pytest tests/unit/test_advanced_synthesis.py tests/unit/test_consolidation_engine.py tests/unit/test_graph_metrics_service.py tests/unit/test_knowledge_summarizer.py tests/unit/test_suggestion_engine.py tests/unit/test_report_generation.py tests/unit/test_websocket_updates.py -v)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -m pytest tests/unit/test_repetition_scheduler.py -v)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -m pytest tests/unit/synthesis/test_repetition_models.py -v)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -m pytest tests/unit/synthesis/test_repetition_models.py::TestRepetitionModels::test_review_difficulty_enum -v)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -m pytest tests/unit -v --tb=short)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" scripts/ci_test_runner.py)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -m py_compile app/models/synthesis/repetition_models.py)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -c \"from app.models.synthesis.report_models import GeneratedReport; print(''GeneratedReport imported successfully'')\")",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -c \"\nimport sys\nsys.path.insert(0, ''.'')\ntry:\n    from app.models.synthesis.advanced_models import AdvancedSynthesisRequest\n    from app.models.synthesis.consolidation_models import ConsolidationRequest\n    from app.models.synthesis.metrics_models import GraphMetrics\n    from app.models.synthesis.summary_models import SummaryRequest\n    from app.models.synthesis.suggestion_models import Suggestion\n    from app.models.synthesis.repetition_models import RepetitionSettings, ForgettingCurve\n    from app.models.synthesis.report_models import GeneratedReport\n    from app.models.synthesis.websocket_models import EventPriority, BroadcastMessage\n    from app.services.knowledge_graph_builder import KnowledgeGraph\n    print(''All critical imports successful'')\nexcept Exception as e:\n    print(f''Import error: {e}'')\n    sys.exit(1)\n\")",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -m pytest tests/ -v --tb=short -x)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" test_dataclass_fix.py)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -m pip install pgvector)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -m pytest tests/unit -v --tb=short -x)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" fix_test_memory_fields.py)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -m pytest tests/unit/test_advanced_synthesis.py::TestAdvancedSynthesisEngine::test_hierarchical_synthesis -v)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -c \"with open(''app/models/synthesis/advanced_models.py'', ''r'') as f: lines = f.readlines(); print(f''Total lines: {len(lines)}''); print(''Last 10 lines:''); print(''''.join(lines[-10:]))\")",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -m pytest tests/unit -v --tb=no)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" scripts/simple_ci_runner.py)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" scripts/cleanup_pre_v3.py)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" scripts/cleanup_unused_routes.py)",
      "Bash(cp:*)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" scripts/restore_synthesis_models.py)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -m pytest tests/unit/test_advanced_synthesis.py -v --tb=short -x)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -m pytest tests/unit/test_advanced_synthesis.py::test_export_request -v --tb=short)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" scripts/restore_missing_files.py)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" scripts/restore_all_routes.py)",
      "Bash(copy:*)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" scripts/find_restore_all_dependencies.py)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" -m pytest tests/unit -v --tb=no -q)",
      "Bash(\"C:\\Users\\dro\\second-brain\\.venv\\Scripts\\python.exe\" scripts/summarize_ci_status.py)"
    ],
    "deny": []
  }
}