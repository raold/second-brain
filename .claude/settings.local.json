{
  "permissions": {
    "allow": [
      "Bash(/Users/dro/Documents/second-brain/.venv/bin/python -m pytest tests/ --tb=no -q --co -q)",
      "Bash(cd:*)",
      "Bash(source:*)",
      "Bash(/Users/dro/Library/CloudStorage/GoogleDrive-dro@lynchburgsmiles.com/My Drive/projects/second-brain/venv/bin/python -m pip install fastapi uvicorn pydantic aiohttp)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(/Users/dro/Library/CloudStorage/GoogleDrive-dro@lynchburgsmiles.com/My\\ Drive/projects/second-brain/venv/bin/python -m pip install:*)",
      "Bash(cd:*)",
      "Bash(/Users/dro/Library/CloudStorage/GoogleDrive-dro@lynchburgsmiles.com/My Drive/projects/second-brain/venv/bin/python -m pip install openai anthropic redis python-multipart)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(/Users/dro/Library/CloudStorage/GoogleDrive-dro@lynchburgsmiles.com/My Drive/projects/second-brain/venv/bin/python -m pip install asyncpg)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(MEMORY_PERSIST_PATH=data/memories.json /Users/dro/Library/CloudStorage/GoogleDrive-dro@lynchburgsmiles.com/My Drive/projects/second-brain/venv/bin/python -c \"\nimport asyncio\nfrom app.services.memory_service_new import MemoryService\n\nasync def test_persistence():\n    # Test with local persistence\n    service = MemoryService(persist_path=''data/memories.json'')\n    \n    # Create and save\n    memory = await service.create_memory(\n        content=''Persistent memory test'',\n        memory_type=''episodic'',\n        importance_score=0.7,\n        tags=[''persistent'', ''test'']\n    )\n    print(f''✅ Created persistent memory: {memory[\"\"id\"\"][:8]}...'')\n    \n    # Create another service instance to test loading\n    service2 = MemoryService(persist_path=''data/memories.json'')\n    memories = await service2.list_memories()\n    print(f''✅ Loaded {len(memories)} memories from disk'')\n    \n    if memories and memories[0][''content''] == ''Persistent memory test'':\n        print(''✅ Persistence verified - memory loaded correctly!'')\n    \n    print(''\\n🎉 Persistence test passed!'')\n\nasyncio.run(test_persistence())\n\")",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(/opt/homebrew/bin/python3:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(USE_SQLITE=true MEMORY_PERSIST_PATH=./data venv/bin/python -c \"\nimport asyncio\nfrom app.services.memory_service_v2 import MemoryServiceV2\n\nasync def test():\n    # Test with SQLite\n    service = MemoryServiceV2()\n    stats = await service.get_statistics()\n    print(f''💾 Storage backend: {stats[\"\"backend\"\"]}'')\n    print(f''📊 Total memories: {stats.get(\"\"total_memories\"\", 0)}'')\n    \n    # Create a test memory\n    memory = await service.create_memory(\n        content=''Testing SQLite persistence in v4.1'',\n        importance_score=0.9,\n        tags=[''sqlite'', ''persistence'', ''v4.1'']\n    )\n    print(f''✅ Created memory in SQLite: {memory[\"\"id\"\"][:8]}...'')\n    \n    # Search using FTS5\n    results = await service.search_memories(''SQLite'')\n    print(f''🔍 Full-text search found {len(results)} results'')\n    \n    # Get updated stats\n    stats = await service.get_statistics()\n    print(f''\\n📊 Database stats:'')\n    print(f''  - Total memories: {stats.get(\"\"total_memories\"\", 0)}'')\n    print(f''  - Database path: {stats.get(\"\"database_path\"\", \"\"N/A\"\")}'')\n    \n    print(''\\n🎉 SQLite backend working perfectly!'')\n\nasyncio.run(test())\n\")",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(docker system prune:*)",
      "Bash(docker volume prune:*)",
      "Bash(venv/bin/python scripts/test_runner.py:*)",
      "Bash(TEST_DATABASE_URL=\"postgresql://secondbrain:changeme@localhost/secondbrain\" venv/bin/python scripts/test_runner.py --integration)",
      "Bash(venv/bin/pip install:*)",
      "Bash(TEST_DATABASE_URL=\"postgresql://secondbrain:changeme@localhost/secondbrain\" venv/bin/python -m pytest tests/unit/test_postgres_backend.py -v)",
      "Bash(TEST_DATABASE_URL=\"postgresql://secondbrain:changeme@localhost/secondbrain\" venv/bin/python -m pytest tests/unit/test_postgres_backend.py::test_create_memory -v -s)",
      "Bash(TEST_DATABASE_URL=\"postgresql://secondbrain:changeme@localhost/secondbrain\" venv/bin/python -m pytest tests/unit/test_postgres_backend.py::test_create_memory -v)",
      "Bash(venv/bin/python -m pytest tests/integration/test_postgres_live.py -v)",
      "Bash(venv/bin/python -m pytest tests/integration/test_postgres_live.py::TestPostgreSQLLive::test_database_connection -v)",
      "Bash(venv/bin/python -m pytest tests/integration/test_postgres_live.py::TestPostgreSQLLive::test_database_connection -v -s)",
      "Bash(venv/bin/python:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(yamllint:*)",
      "Bash(gh release view:*)",
      "Bash(gh release edit:*)",
      "Bash(npm create:*)",
      "Bash(npx sv create:*)",
      "Bash(find:*)",
      "Bash(.venv/bin/python -m pytest tests/ --tb=no -q --co -q)",
      "Bash(sqlite3:*)",
      "Bash(python3:*)",
      "Bash(.venv_new/bin/pip install:*)",
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(git rm:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(.venv/bin/python -m pytest tests/unit/test_basic_functionality.py -v --tb=short)",
      "Bash(.venv/bin/pip install:*)",
      "Bash(apt list:*)",
      "Bash(lsb_release:*)",
      "Bash(cat:*)",
      "Bash(sudo add-apt-repository:*)",
      "Bash(sudo apt:*)",
      "Bash(curl:*)",
      "Bash(.venv/bin/pip:*)",
      "Bash(.venv/bin/python:*)",
      "Bash(grep:*)",
      "Bash(lsof:*)",
      "Bash(pkill:*)",
      "Bash(npm install)",
      "Bash(node:*)",
      "Bash(docker-compose up:*)",
      "Bash(psql:*)",
      "Bash(sudo service:*)",
      "Bash(docker.exe ps:*)",
      "Bash(export DOCKER_HOST=tcp://localhost:2375)",
      "Bash(wsl.exe:*)",
      "Bash(mkdir:*)",
      "Bash(cp:*)",
      "Bash(chmod:*)",
      "Bash(cmd.exe /c start http://localhost:8001/docs)",
      "Bash(pg_isready:*)",
      "Bash(./start_postgres_only.sh:*)",
      "Bash(git config:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(pip install:*)",
      "Bash(flake8:*)",
      "Bash(git tag:*)",
      "Bash(echo:*)",
      "Bash(git describe:*)",
      "Bash(# Move HTML files to docs folder\nmv /mnt/c/tools/second-brain/dashboard.html /mnt/c/tools/second-brain/docs/ 2>/dev/null\nmv /mnt/c/tools/second-brain/simple_ui.html /mnt/c/tools/second-brain/docs/ 2>/dev/null\nmv /mnt/c/tools/second-brain/index.html /mnt/c/tools/second-brain/docs/ 2>/dev/null\n\n# Move release notes to docs/releases\nmkdir -p /mnt/c/tools/second-brain/docs/releases\nmv /mnt/c/tools/second-brain/RELEASE_NOTES*.md /mnt/c/tools/second-brain/docs/releases/ 2>/dev/null\nmv /mnt/c/tools/second-brain/V4.2_FINAL_STATUS.md /mnt/c/tools/second-brain/docs/releases/ 2>/dev/null\nmv /mnt/c/tools/second-brain/SECURITY_PATCH_4.2.3.md /mnt/c/tools/second-brain/docs/releases/ 2>/dev/null\n\n# Move development docs\nmv /mnt/c/tools/second-brain/QA_REPORT_v4.2.md /mnt/c/tools/second-brain/docs/ 2>/dev/null\nmv /mnt/c/tools/second-brain/CODE_ANALYSIS_REPORT.md /mnt/c/tools/second-brain/docs/ 2>/dev/null\nmv /mnt/c/tools/second-brain/GITHUB_RELEASE_INSTRUCTIONS.md /mnt/c/tools/second-brain/docs/ 2>/dev/null\nmv /mnt/c/tools/second-brain/PROJECT_STRUCTURE.md /mnt/c/tools/second-brain/docs/ 2>/dev/null\nmv /mnt/c/tools/second-brain/start_postgres.md /mnt/c/tools/second-brain/docs/ 2>/dev/null\nmv /mnt/c/tools/second-brain/RUN_THIS_FIRST.md /mnt/c/tools/second-brain/docs/ 2>/dev/null\n\n# Move scripts to scripts folder\nmkdir -p /mnt/c/tools/second-brain/scripts/startup\nmv /mnt/c/tools/second-brain/*.bat /mnt/c/tools/second-brain/scripts/startup/ 2>/dev/null\nmv /mnt/c/tools/second-brain/*.sh /mnt/c/tools/second-brain/scripts/startup/ 2>/dev/null\nmv /mnt/c/tools/second-brain/run_dev.py /mnt/c/tools/second-brain/scripts/ 2>/dev/null\n\necho \"\"✅ Files organized\"\")",
      "Bash(/mnt/c/tools/second-brain/Dockerfile.multimodal )",
      "Bash(/mnt/c/tools/second-brain/Dockerfile.performance )",
      "Bash(/mnt/c/tools/second-brain/warp-mcp-config.json )",
      "Bash(/mnt/c/tools/second-brain/warp-mcp-final.json )",
      "Bash(/mnt/c/tools/second-brain/docker-compose.app.yml )",
      "Bash(/mnt/c/tools/second-brain/.pre-commit-config.yaml )",
      "Bash(/mnt/c/tools/second-brain/alembic.ini )",
      "Bash(/mnt/c/tools/second-brain/ruff.toml)",
      "Bash(__NEW_LINE__ echo \"✅ Removed unnecessary config files\")",
      "Bash(# Check for __pycache__ directories\nfind /mnt/c/tools/second-brain -type d -name \"\"__pycache__\"\" 2>/dev/null | wc -l)",
      "Bash(# Remove empty README\nrm -f /mnt/c/tools/second-brain/scripts/SCRIPTS_README.md\n\n# Check if development and setup folders are empty or unnecessary\nls /mnt/c/tools/second-brain/scripts/development/\nls /mnt/c/tools/second-brain/scripts/setup/)",
      "Bash(gh release create:*)",
      "Bash(--title \"v4.2.3: Security Patches & Documentation Overhaul\" )",
      "Bash(--notes-file RELEASE_NOTES_v4.2.3.md)",
      "Bash(tree:*)",
      "Bash(kill:*)",
      "Bash(bash:*)"
    ],
    "deny": []
  }
}