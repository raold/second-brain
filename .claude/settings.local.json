{
  "permissions": {
    "allow": [
      "Bash(/Users/dro/Documents/second-brain/.venv/bin/python -m pytest tests/ --tb=no -q --co -q)",
      "Bash(cd:*)",
      "Bash(source:*)",
      "Bash(/Users/dro/Library/CloudStorage/GoogleDrive-dro@lynchburgsmiles.com/My Drive/projects/second-brain/venv/bin/python -m pip install fastapi uvicorn pydantic aiohttp)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(/Users/dro/Library/CloudStorage/GoogleDrive-dro@lynchburgsmiles.com/My\\ Drive/projects/second-brain/venv/bin/python -m pip install:*)",
      "Bash(cd:*)",
      "Bash(/Users/dro/Library/CloudStorage/GoogleDrive-dro@lynchburgsmiles.com/My Drive/projects/second-brain/venv/bin/python -m pip install openai anthropic redis python-multipart)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(/Users/dro/Library/CloudStorage/GoogleDrive-dro@lynchburgsmiles.com/My Drive/projects/second-brain/venv/bin/python -m pip install asyncpg)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(MEMORY_PERSIST_PATH=data/memories.json /Users/dro/Library/CloudStorage/GoogleDrive-dro@lynchburgsmiles.com/My Drive/projects/second-brain/venv/bin/python -c \"\nimport asyncio\nfrom app.services.memory_service_new import MemoryService\n\nasync def test_persistence():\n    # Test with local persistence\n    service = MemoryService(persist_path=''data/memories.json'')\n    \n    # Create and save\n    memory = await service.create_memory(\n        content=''Persistent memory test'',\n        memory_type=''episodic'',\n        importance_score=0.7,\n        tags=[''persistent'', ''test'']\n    )\n    print(f''‚úÖ Created persistent memory: {memory[\"\"id\"\"][:8]}...'')\n    \n    # Create another service instance to test loading\n    service2 = MemoryService(persist_path=''data/memories.json'')\n    memories = await service2.list_memories()\n    print(f''‚úÖ Loaded {len(memories)} memories from disk'')\n    \n    if memories and memories[0][''content''] == ''Persistent memory test'':\n        print(''‚úÖ Persistence verified - memory loaded correctly!'')\n    \n    print(''\\nüéâ Persistence test passed!'')\n\nasyncio.run(test_persistence())\n\")",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(/opt/homebrew/bin/python3:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(USE_SQLITE=true MEMORY_PERSIST_PATH=./data venv/bin/python -c \"\nimport asyncio\nfrom app.services.memory_service_v2 import MemoryServiceV2\n\nasync def test():\n    # Test with SQLite\n    service = MemoryServiceV2()\n    stats = await service.get_statistics()\n    print(f''üíæ Storage backend: {stats[\"\"backend\"\"]}'')\n    print(f''üìä Total memories: {stats.get(\"\"total_memories\"\", 0)}'')\n    \n    # Create a test memory\n    memory = await service.create_memory(\n        content=''Testing SQLite persistence in v4.1'',\n        importance_score=0.9,\n        tags=[''sqlite'', ''persistence'', ''v4.1'']\n    )\n    print(f''‚úÖ Created memory in SQLite: {memory[\"\"id\"\"][:8]}...'')\n    \n    # Search using FTS5\n    results = await service.search_memories(''SQLite'')\n    print(f''üîç Full-text search found {len(results)} results'')\n    \n    # Get updated stats\n    stats = await service.get_statistics()\n    print(f''\\nüìä Database stats:'')\n    print(f''  - Total memories: {stats.get(\"\"total_memories\"\", 0)}'')\n    print(f''  - Database path: {stats.get(\"\"database_path\"\", \"\"N/A\"\")}'')\n    \n    print(''\\nüéâ SQLite backend working perfectly!'')\n\nasyncio.run(test())\n\")",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(docker system prune:*)",
      "Bash(docker volume prune:*)",
      "Bash(venv/bin/python scripts/test_runner.py:*)",
      "Bash(TEST_DATABASE_URL=\"postgresql://secondbrain:changeme@localhost/secondbrain\" venv/bin/python scripts/test_runner.py --integration)",
      "Bash(venv/bin/pip install:*)",
      "Bash(TEST_DATABASE_URL=\"postgresql://secondbrain:changeme@localhost/secondbrain\" venv/bin/python -m pytest tests/unit/test_postgres_backend.py -v)",
      "Bash(TEST_DATABASE_URL=\"postgresql://secondbrain:changeme@localhost/secondbrain\" venv/bin/python -m pytest tests/unit/test_postgres_backend.py::test_create_memory -v -s)",
      "Bash(TEST_DATABASE_URL=\"postgresql://secondbrain:changeme@localhost/secondbrain\" venv/bin/python -m pytest tests/unit/test_postgres_backend.py::test_create_memory -v)",
      "Bash(venv/bin/python -m pytest tests/integration/test_postgres_live.py -v)",
      "Bash(venv/bin/python -m pytest tests/integration/test_postgres_live.py::TestPostgreSQLLive::test_database_connection -v)",
      "Bash(venv/bin/python -m pytest tests/integration/test_postgres_live.py::TestPostgreSQLLive::test_database_connection -v -s)",
      "Bash(venv/bin/python:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(yamllint:*)",
      "Bash(gh release view:*)",
      "Bash(gh release edit:*)",
      "Bash(npm create:*)",
      "Bash(npx sv create:*)",
      "Bash(find:*)",
      "Bash(.venv/bin/python -m pytest tests/ --tb=no -q --co -q)",
      "Bash(sqlite3:*)",
      "Bash(python3:*)",
      "Bash(.venv_new/bin/pip install:*)",
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(git rm:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(.venv/bin/python -m pytest tests/unit/test_basic_functionality.py -v --tb=short)",
      "Bash(.venv/bin/pip install:*)",
      "Bash(apt list:*)",
      "Bash(lsb_release:*)",
      "Bash(cat:*)",
      "Bash(sudo add-apt-repository:*)",
      "Bash(sudo apt:*)",
      "Bash(curl:*)",
      "Bash(.venv/bin/pip:*)",
      "Bash(.venv/bin/python:*)"
    ],
    "deny": []
  }
}