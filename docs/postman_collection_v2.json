{
	"info": {
		"_postman_id": "second-brain-v2-api",
		"name": "Second Brain V2 Unified API",
		"description": "Complete API collection for Second Brain V2 with real-time WebSocket capabilities.\n\n## Quick Start\n1. Set the `{{api_key}}` variable in Collection Variables\n2. Update `{{base_url}}` if needed (default: http://localhost:8000/api/v2)\n3. Run the requests to test API functionality\n\n## WebSocket Testing\nFor WebSocket testing, use a WebSocket client to connect to:\n`ws://localhost:8000/api/v2/ws`\n\n## Authentication\nAll requests require an API key in the Authorization header as a Bearer token.\n\n## Documentation\nSee docs/API_V2_UNIFIED_SPECIFICATION.md for complete API documentation.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "second-brain-api"
	},
	"item": [
		{
			"name": "System Metrics",
			"item": [
				{
					"name": "Get Simple Metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('tests');",
									"    pm.expect(jsonData).to.have.property('patterns');",
									"    pm.expect(jsonData).to.have.property('version');",
									"    pm.expect(jsonData).to.have.property('memories');",
									"    pm.expect(jsonData).to.have.property('active_users');",
									"    pm.expect(jsonData).to.have.property('system_health');",
									"});",
									"",
									"pm.test(\"System health is valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(['healthy', 'degraded', 'unhealthy']).to.include(jsonData.system_health);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/metrics",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"metrics"
							]
						},
						"description": "Get simplified metrics optimized for user-facing interfaces. Returns key system metrics including memory count, active users, and system health status."
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/metrics",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"metrics"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"tests\": 436,\n    \"patterns\": 27,\n    \"version\": \"3.0.0\",\n    \"agents\": 27,\n    \"token_usage\": \"6x\",\n    \"memories\": 150,\n    \"active_users\": 3,\n    \"system_health\": \"healthy\"\n}"
						}
					]
				},
				{
					"name": "Get Detailed Metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has main sections\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('memories');",
									"    pm.expect(jsonData).to.have.property('performance');",
									"    pm.expect(jsonData).to.have.property('system');",
									"    pm.expect(jsonData).to.have.property('database');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"});",
									"",
									"pm.test(\"Memory metrics are detailed\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.memories).to.have.property('total');",
									"    pm.expect(jsonData.memories).to.have.property('unique_users');",
									"    pm.expect(jsonData.memories).to.have.property('type_distribution');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/metrics/detailed",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"metrics",
								"detailed"
							]
						},
						"description": "Get comprehensive metrics for development dashboards and monitoring. Includes detailed memory statistics, performance metrics, system information, and database status."
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/metrics/detailed",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"metrics",
										"detailed"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"memories\": {\n        \"total\": 150,\n        \"unique_users\": 5,\n        \"avg_importance\": 0.65,\n        \"last_created\": \"2025-08-01T10:30:00Z\",\n        \"with_embeddings\": 142,\n        \"avg_length\": 485,\n        \"last_24h\": 12,\n        \"last_7d\": 89,\n        \"last_30d\": 150,\n        \"type_distribution\": {\n            \"semantic\": 85,\n            \"episodic\": 45,\n            \"procedural\": 20\n        },\n        \"unique_tags\": 47,\n        \"top_tags\": [\"ai\", \"learning\", \"productivity\", \"work\", \"research\"]\n    },\n    \"performance\": {\n        \"api_response_time\": \"45ms\",\n        \"rps_capacity\": \"1000+\",\n        \"memory_usage\": \"42%\",\n        \"cpu_usage\": \"15%\",\n        \"disk_usage\": \"35%\",\n        \"active_connections\": 5,\n        \"cache_hit_rate\": \"87%\",\n        \"system_memory_mb\": 2048,\n        \"system_memory_available_mb\": 6144,\n        \"uptime_seconds\": 86400\n    },\n    \"system\": {\n        \"platform\": \"posix\",\n        \"cpu_count\": 8,\n        \"boot_time\": \"2025-07-31T08:00:00Z\",\n        \"python_version\": \"3.11.5\"\n    },\n    \"database\": {\n        \"size_mb\": 245,\n        \"active_connections\": 5,\n        \"index_count\": 12,\n        \"type\": \"PostgreSQL\"\n    },\n    \"timestamp\": \"2025-08-01T10:30:00Z\"\n}"
						}
					]
				}
			],
			"description": "System metrics endpoints for monitoring application performance, resource usage, and operational statistics."
		},
		{
			"name": "System Health",
			"item": [
				{
					"name": "Get Health Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has health status\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('checks');",
									"    pm.expect(jsonData).to.have.property('metrics');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"});",
									"",
									"pm.test(\"Status is valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(['healthy', 'degraded', 'unhealthy', 'error']).to.include(jsonData.status);",
									"});",
									"",
									"pm.test(\"Component checks exist\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.checks).to.have.property('api');",
									"    pm.expect(jsonData.checks).to.have.property('database');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Comprehensive system health monitoring including all subsystems (API, database, Redis, disk, memory, CPU). Returns overall health status and individual component checks."
					},
					"response": [
						{
							"name": "Healthy System",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/health",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"healthy\",\n    \"checks\": {\n        \"api\": \"healthy\",\n        \"database\": \"healthy\",\n        \"redis\": \"healthy\",\n        \"disk\": \"healthy\",\n        \"memory\": \"healthy\",\n        \"cpu\": \"healthy\"\n    },\n    \"metrics\": {\n        \"cpu_percent\": 15.2,\n        \"memory_percent\": 42.1,\n        \"disk_percent\": 35.8\n    },\n    \"timestamp\": \"2025-08-01T10:30:00Z\"\n}"
						}
					]
				}
			],
			"description": "Health monitoring endpoints for system status and component health checks."
		},
		{
			"name": "Memory Operations",
			"item": [
				{
					"name": "Ingest Memory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response indicates success\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('memory_id');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Memory ID is valid UUID format\", function () {",
									"    const jsonData = pm.response.json();",
									"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
									"    pm.expect(jsonData.memory_id).to.match(uuidRegex);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"This is a test memory created via Postman. It demonstrates API functionality and WebSocket broadcasting.\",\n    \"memory_type\": \"semantic\",\n    \"tags\": [\"test\", \"postman\", \"api\", \"demonstration\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/memories/ingest",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"memories",
								"ingest"
							]
						},
						"description": "Create a new memory and broadcast update to all WebSocket clients. This endpoint ingests content and automatically broadcasts a 'memory_created' event to all connected WebSocket clients."
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Important insights from today's research session on AI embeddings\",\n    \"memory_type\": \"semantic\",\n    \"tags\": [\"ai\", \"research\", \"embeddings\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/memories/ingest",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"memories",
										"ingest"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"memory_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"message\": \"Memory ingested successfully\"\n}"
						}
					]
				}
			],
			"description": "Memory management operations including ingestion with real-time WebSocket broadcasting."
		},
		{
			"name": "Project Management",
			"item": [
				{
					"name": "Get TODOs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has TODO structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('todos');",
									"    pm.expect(jsonData).to.have.property('stats');",
									"    pm.expect(jsonData).to.have.property('last_updated');",
									"});",
									"",
									"pm.test(\"Stats include completion metrics\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.stats).to.have.property('total');",
									"    pm.expect(jsonData.stats).to.have.property('completed');",
									"    pm.expect(jsonData.stats).to.have.property('completion_rate');",
									"});",
									"",
									"pm.test(\"TODOs have required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.todos.length > 0) {",
									"        const todo = jsonData.todos[0];",
									"        pm.expect(todo).to.have.property('id');",
									"        pm.expect(todo).to.have.property('content');",
									"        pm.expect(todo).to.have.property('status');",
									"        pm.expect(todo).to.have.property('priority');",
									"        pm.expect(todo).to.have.property('category');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"todos"
							]
						},
						"description": "Parse and return TODO items from TODO.md with categorization and statistics. Automatically detects categories, priorities, and calculates completion metrics."
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/todos",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"todos"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"todos\": [\n        {\n            \"id\": \"todo-0\",\n            \"content\": \"Implement load testing suite\",\n            \"status\": \"pending\",\n            \"priority\": \"high\",\n            \"description\": \"Add performance benchmarks to CI\",\n            \"category\": \"testing\"\n        },\n        {\n            \"id\": \"todo-1\",\n            \"content\": \"Fix authentication middleware\",\n            \"status\": \"completed\",\n            \"priority\": \"high\",\n            \"description\": null,\n            \"category\": \"bugfix\"\n        }\n    ],\n    \"stats\": {\n        \"total\": 45,\n        \"completed\": 23,\n        \"in_progress\": 3,\n        \"pending\": 19,\n        \"high_priority\": 12,\n        \"completion_rate\": 51\n    },\n    \"last_updated\": \"2025-08-01T10:30:00Z\"\n}"
						}
					]
				}
			],
			"description": "Project management endpoints for TODO tracking and project status monitoring."
		},
		{
			"name": "Development",
			"item": [
				{
					"name": "Get Git Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has git activity structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('commits');",
									"    pm.expect(jsonData).to.have.property('timeline');",
									"    pm.expect(jsonData).to.have.property('stats');",
									"});",
									"",
									"pm.test(\"Commits have required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.commits.length > 0) {",
									"        const commit = jsonData.commits[0];",
									"        pm.expect(commit).to.have.property('hash');",
									"        pm.expect(commit).to.have.property('message');",
									"        pm.expect(commit).to.have.property('timestamp');",
									"        pm.expect(commit).to.have.property('author');",
									"        pm.expect(commit).to.have.property('relative_time');",
									"    }",
									"});",
									"",
									"pm.test(\"Stats include repository info\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.stats).to.have.property('total_commits');",
									"    pm.expect(jsonData.stats).to.have.property('authors');",
									"    pm.expect(jsonData.stats).to.have.property('branch');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/git/activity",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"git",
								"activity"
							]
						},
						"description": "Retrieve git commit history and repository statistics. Returns recent commits with author information, relative timestamps, and repository statistics."
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/git/activity",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"git",
										"activity"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"commits\": [\n        {\n            \"hash\": \"10cd929\",\n            \"message\": \"feat: Implement Second Brain v2.0 interface with Apple-inspired design\",\n            \"timestamp\": \"2025-07-31T15:30:00Z\",\n            \"author\": \"Developer\",\n            \"relative_time\": \"2 hours ago\"\n        }\n    ],\n    \"timeline\": [\n        {\"label\": \"2h\", \"timestamp\": \"2025-08-01T08:30:00Z\"},\n        {\"label\": \"1d\", \"timestamp\": \"2025-07-31T10:30:00Z\"},\n        {\"label\": \"3d\", \"timestamp\": \"2025-07-29T10:30:00Z\"},\n        {\"label\": \"1w\", \"timestamp\": \"2025-07-25T10:30:00Z\"},\n        {\"label\": \"1m\", \"timestamp\": \"2025-07-01T10:30:00Z\"}\n    ],\n    \"stats\": {\n        \"total_commits\": 10,\n        \"authors\": 1,\n        \"branch\": \"main\"\n    }\n}"
						}
					]
				}
			],
			"description": "Development-related endpoints for git activity, repository statistics, and development metrics."
		},
		{
			"name": "Error Scenarios",
			"item": [
				{
					"name": "Unauthorized Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error response format\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"    pm.expect(jsonData.detail).to.include('Invalid');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/metrics",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"metrics"
							]
						},
						"description": "Test unauthorized access without API key. Should return 401 Unauthorized error."
					},
					"response": [
						{
							"name": "Unauthorized Error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/metrics",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"metrics"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Invalid or missing API key\",\n    \"status_code\": 401,\n    \"timestamp\": \"2025-08-01T10:30:00Z\",\n    \"path\": \"/api/v2/metrics\"\n}"
						}
					]
				},
				{
					"name": "Invalid Memory Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Validation error response\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"    pm.expect(jsonData.detail).to.include('required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{api_key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"memory_type\": \"semantic\",\n    \"tags\": [\"test\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/memories/ingest",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"memories",
								"ingest"
							]
						},
						"description": "Test validation error with missing required content field. Should return 422 Validation Error."
					},
					"response": [
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"memory_type\": \"semantic\",\n    \"tags\": [\"test\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/memories/ingest",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"memories",
										"ingest"
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Content is required and cannot be empty\",\n    \"status_code\": 422,\n    \"timestamp\": \"2025-08-01T10:30:00Z\",\n    \"path\": \"/api/v2/memories/ingest\"\n}"
						}
					]
				}
			],
			"description": "Error scenario testing for authentication, validation, and other error conditions."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-set content type for JSON requests",
					"if (pm.request.body && pm.request.body.mode === 'raw') {",
					"    pm.request.headers.add({",
					"        key: 'Content-Type',",
					"        value: 'application/json'",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test for response time",
					"pm.test(\"Response time is reasonable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Global test for proper content type on successful responses",
					"if (pm.response.code >= 200 && pm.response.code < 300) {",
					"    pm.test(\"Content-Type is application/json\", function () {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000/api/v2",
			"type": "string",
			"description": "Base URL for the Second Brain V2 API"
		},
		{
			"key": "api_key",
			"value": "your-api-key-here",
			"type": "string",
			"description": "API key for authentication. Replace with your actual API key."
		}
	]
}