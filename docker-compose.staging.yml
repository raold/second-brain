# Second Brain Staging Environment
# Production-like setup for staging/testing
# Usage: docker-compose -f docker-compose.staging.yml up -d

services:
  # Database
  postgres:
    image: postgres:16-alpine
    container_name: staging-secondbrain-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-secondbrain}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-staging_password_change_me}
      POSTGRES_DB: ${DB_NAME:-secondbrain_staging}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - staging_postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-secondbrain} -d ${DB_NAME:-secondbrain_staging}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - staging_network

  # Cache
  redis:
    image: redis:7-alpine
    container_name: staging-secondbrain-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-staging_redis_change_me}
    volumes:
      - staging_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-staging_redis_change_me}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - staging_network

  # Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: "3.11"
    image: secondbrain:staging
    container_name: staging-secondbrain-app
    restart: unless-stopped
    environment:
      # App settings
      APP_NAME: "Second Brain Staging"
      APP_ENV: staging
      LOG_LEVEL: info
      
      # Database
      DATABASE_URL: postgresql+asyncpg://${DB_USER:-secondbrain}:${DB_PASSWORD:-staging_password_change_me}@postgres:5432/${DB_NAME:-secondbrain_staging}
      
      # Redis
      REDIS_URL: redis://default:${REDIS_PASSWORD:-staging_redis_change_me}@redis:6379/0
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-change_me_in_production}
      CORS_ORIGINS: ${CORS_ORIGINS:-["http://localhost:3000","http://localhost:8000"]}
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Features
      USE_MOCK_DATABASE: "false"
      ENABLE_TELEMETRY: "true"
      
    ports:
      - "${APP_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - staging_app_data:/app/data
      - staging_logs:/app/logs
    networks:
      - staging_network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python scripts/wait_for_db.py &&
        echo 'Running migrations...' &&
        alembic upgrade head &&
        echo 'Starting application...' &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --workers 2
      "

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: staging-secondbrain-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - staging_nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - staging_network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: staging-secondbrain-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - staging_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - staging_network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: staging-secondbrain-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-staging_grafana_change_me}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - staging_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    networks:
      - staging_network

  # Database Admin
  adminer:
    image: adminer:latest
    container_name: staging-secondbrain-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    depends_on:
      - postgres
    networks:
      - staging_network

volumes:
  staging_postgres_data:
    name: staging_secondbrain_postgres_data
  staging_redis_data:
    name: staging_secondbrain_redis_data
  staging_app_data:
    name: staging_secondbrain_app_data
  staging_logs:
    name: staging_secondbrain_logs
  staging_nginx_logs:
    name: staging_secondbrain_nginx_logs
  staging_prometheus_data:
    name: staging_secondbrain_prometheus_data
  staging_grafana_data:
    name: staging_secondbrain_grafana_data

networks:
  staging_network:
    name: staging_secondbrain_network
    driver: bridge