#!/bin/bash

# Cipher Installation Script for Second-Brain Integration
# This script installs and configures Cipher for multi-IDE and multi-LLM usage

set -e

echo "ðŸš€ Installing Cipher for Second-Brain Integration"
echo "================================================"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check prerequisites
check_prerequisites() {
    echo -e "${YELLOW}Checking prerequisites...${NC}"
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        echo -e "${RED}Node.js is not installed. Please install Node.js v18+ first.${NC}"
        exit 1
    fi
    
    NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -lt 18 ]; then
        echo -e "${RED}Node.js version is too old. Please upgrade to v18+${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}âœ“ Node.js $(node -v) detected${NC}"
    
    # Check for Docker (optional)
    if command -v docker &> /dev/null; then
        echo -e "${GREEN}âœ“ Docker detected (optional)${NC}"
    else
        echo -e "${YELLOW}âš  Docker not found (optional for containerized deployment)${NC}"
    fi
}

# Install Cipher
install_cipher() {
    echo -e "${YELLOW}Installing Cipher...${NC}"
    
    # Check if Cipher is already installed
    if command -v cipher &> /dev/null; then
        echo -e "${YELLOW}Cipher is already installed. Updating...${NC}"
        npm update -g @campfire/cipher
    else
        npm install -g @campfire/cipher
    fi
    
    echo -e "${GREEN}âœ“ Cipher installed successfully${NC}"
}

# Create configuration directory
setup_config_dir() {
    echo -e "${YELLOW}Setting up configuration directory...${NC}"
    
    CIPHER_DIR="$HOME/.cipher"
    mkdir -p "$CIPHER_DIR"
    
    echo -e "${GREEN}âœ“ Configuration directory created at $CIPHER_DIR${NC}"
}

# Create configuration file
create_config() {
    echo -e "${YELLOW}Creating configuration file...${NC}"
    
    CONFIG_FILE="$HOME/.cipher/config.yaml"
    
    # Check for existing config
    if [ -f "$CONFIG_FILE" ]; then
        echo -e "${YELLOW}Configuration file already exists. Backing up...${NC}"
        cp "$CONFIG_FILE" "$CONFIG_FILE.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    cat > "$CONFIG_FILE" << 'EOF'
# Cipher Configuration for Second-Brain Integration
# Generated by install_cipher.sh

# LLM Providers Configuration
llm:
  providers:
    - name: openai
      api_key: ${OPENAI_API_KEY}
      model: gpt-4-turbo-preview
      enabled: true
    
    - name: anthropic
      api_key: ${ANTHROPIC_API_KEY}
      model: claude-3-opus-20240229
      enabled: true
    
    - name: ollama
      base_url: http://localhost:11434
      model: llama3:latest
      enabled: false

# Vector Database Configuration
vector_store:
  provider: sqlite  # Start with SQLite, upgrade to Qdrant later
  sqlite:
    path: ~/.cipher/memories.db
  
  # Qdrant configuration (uncomment when ready)
  # provider: qdrant
  # qdrant:
  #   url: http://localhost:6333
  #   collection: cipher_memories

# Embedding Configuration
embeddings:
  provider: openai
  model: text-embedding-3-small
  dimensions: 1536
  batch_size: 100

# Memory Layer Settings
memory:
  system1:
    max_memories: 10000
    retention_days: 90
    auto_summarize: true
  
  system2:
    max_chains: 5000
    chain_depth: 10
    prune_threshold: 0.3

# MCP Server Configuration
mcp:
  mode: aggregator
  transport: stdio
  port: 3000
  
  # IDE-specific settings
  ides:
    vscode:
      enabled: true
      workspace_trust: true
    
    cursor:
      enabled: true
      auto_sync: true
    
    claude_desktop:
      enabled: true
      context_window: 200000

# Second-Brain Integration
second_brain:
  enabled: true
  api_endpoint: http://localhost:8000
  sync_interval: 60
  share_memories: true

# Team Collaboration
collaboration:
  enabled: false  # Enable when ready for team features
  sync_interval: 300
  share_with_team: false

# Logging
logging:
  level: info
  file: ~/.cipher/cipher.log
  rotate: daily
EOF
    
    echo -e "${GREEN}âœ“ Configuration file created at $CONFIG_FILE${NC}"
}

# Setup environment variables
setup_env_vars() {
    echo -e "${YELLOW}Setting up environment variables...${NC}"
    
    # Detect shell
    if [ -n "$ZSH_VERSION" ]; then
        SHELL_RC="$HOME/.zshrc"
    elif [ -n "$BASH_VERSION" ]; then
        SHELL_RC="$HOME/.bashrc"
    else
        SHELL_RC="$HOME/.profile"
    fi
    
    # Check if variables are already set
    if grep -q "CIPHER_CONFIG_PATH" "$SHELL_RC"; then
        echo -e "${YELLOW}Environment variables already configured${NC}"
    else
        echo "" >> "$SHELL_RC"
        echo "# Cipher Configuration" >> "$SHELL_RC"
        echo "export CIPHER_CONFIG_PATH=\"\$HOME/.cipher/config.yaml\"" >> "$SHELL_RC"
        echo "export CIPHER_LOG_LEVEL=\"info\"" >> "$SHELL_RC"
        echo "" >> "$SHELL_RC"
        
        echo -e "${GREEN}âœ“ Environment variables added to $SHELL_RC${NC}"
        echo -e "${YELLOW}Please run: source $SHELL_RC${NC}"
    fi
}

# Configure Claude Desktop
configure_claude_desktop() {
    echo -e "${YELLOW}Configuring Claude Desktop...${NC}"
    
    CLAUDE_CONFIG_DIR="$HOME/Library/Application Support/Claude"
    CLAUDE_CONFIG_FILE="$CLAUDE_CONFIG_DIR/claude_desktop_config.json"
    
    if [ -d "$CLAUDE_CONFIG_DIR" ]; then
        mkdir -p "$CLAUDE_CONFIG_DIR"
        
        # Check for existing config
        if [ -f "$CLAUDE_CONFIG_FILE" ]; then
            echo -e "${YELLOW}Claude Desktop config exists. Creating backup...${NC}"
            cp "$CLAUDE_CONFIG_FILE" "$CLAUDE_CONFIG_FILE.backup.$(date +%Y%m%d_%H%M%S)"
        fi
        
        cat > "$CLAUDE_CONFIG_FILE" << 'EOF'
{
  "mcpServers": {
    "cipher": {
      "command": "cipher",
      "args": ["serve", "--transport", "stdio"],
      "env": {
        "CIPHER_CONFIG_PATH": "~/.cipher/config.yaml"
      }
    }
  }
}
EOF
        
        echo -e "${GREEN}âœ“ Claude Desktop configured${NC}"
    else
        echo -e "${YELLOW}âš  Claude Desktop not found. Skipping configuration.${NC}"
    fi
}

# Test installation
test_installation() {
    echo -e "${YELLOW}Testing Cipher installation...${NC}"
    
    # Check version
    if cipher --version &> /dev/null; then
        CIPHER_VERSION=$(cipher --version)
        echo -e "${GREEN}âœ“ Cipher version: $CIPHER_VERSION${NC}"
    else
        echo -e "${RED}âœ— Cipher command not found. Installation may have failed.${NC}"
        exit 1
    fi
    
    # Validate configuration
    if cipher config validate &> /dev/null; then
        echo -e "${GREEN}âœ“ Configuration is valid${NC}"
    else
        echo -e "${YELLOW}âš  Configuration validation failed. Please check your API keys.${NC}"
    fi
}

# Create helper scripts
create_helper_scripts() {
    echo -e "${YELLOW}Creating helper scripts...${NC}"
    
    SCRIPTS_DIR="$HOME/.cipher/scripts"
    mkdir -p "$SCRIPTS_DIR"
    
    # Start script
    cat > "$SCRIPTS_DIR/start_cipher.sh" << 'EOF'
#!/bin/bash
echo "Starting Cipher server..."
cipher serve --mode aggregator
EOF
    
    # Sync script
    cat > "$SCRIPTS_DIR/sync_with_second_brain.sh" << 'EOF'
#!/bin/bash
echo "Syncing Cipher with Second-Brain..."
curl -X POST http://localhost:8000/api/v2/sync/cipher \
     -H "Content-Type: application/json" \
     -d '{"action": "sync", "source": "cipher"}'
EOF
    
    chmod +x "$SCRIPTS_DIR"/*.sh
    
    echo -e "${GREEN}âœ“ Helper scripts created in $SCRIPTS_DIR${NC}"
}

# Main installation flow
main() {
    echo ""
    check_prerequisites
    echo ""
    install_cipher
    echo ""
    setup_config_dir
    echo ""
    create_config
    echo ""
    setup_env_vars
    echo ""
    configure_claude_desktop
    echo ""
    create_helper_scripts
    echo ""
    test_installation
    echo ""
    
    echo -e "${GREEN}================================================${NC}"
    echo -e "${GREEN}ðŸŽ‰ Cipher installation complete!${NC}"
    echo -e "${GREEN}================================================${NC}"
    echo ""
    echo "Next steps:"
    echo "1. Set your API keys:"
    echo "   export OPENAI_API_KEY='your-key'"
    echo "   export ANTHROPIC_API_KEY='your-key'"
    echo ""
    echo "2. Source your shell configuration:"
    echo "   source ~/.zshrc  # or ~/.bashrc"
    echo ""
    echo "3. Start Cipher server:"
    echo "   cipher serve"
    echo ""
    echo "4. Or use the helper script:"
    echo "   ~/.cipher/scripts/start_cipher.sh"
    echo ""
    echo "5. Test with Claude Desktop or your IDE"
    echo ""
    echo "For more information, see: docs/CIPHER_SETUP.md"
}

# Run main function
main