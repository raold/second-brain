#!/usr/bin/env python3
"""
VERSIONBUMP Command Demo
Shows how to use the VERSIONBUMP command system
"""

from pathlib import Path


def show_versionbump_usage():
    """Display comprehensive usage information for VERSIONBUMP command"""

    current_dir = Path.cwd()

    print("🚀 VERSIONBUMP Command System")
    print("=" * 50)
    print()
    print("📋 **WHAT IT DOES:**")
    print("   Complete automated version bump workflow:")
    print("   ✅ Updates app/version.py")
    print("   ✅ Updates README.md")
    print("   ✅ Updates CHANGELOG.md")
    print("   ✅ Updates docs/ recursively")
    print("   ✅ Git add + commit + push")
    print("   ✅ Creates Git tag")
    print("   ✅ Generates GitHub release notes")
    print()

    print("🎯 **USAGE (Windows):**")
    print()
    print("   **PowerShell (Recommended):**")
    print("   ```powershell")
    print("   scripts\\VERSIONBUMP.ps1 patch")
    print("   scripts\\VERSIONBUMP.ps1 minor")
    print("   scripts\\VERSIONBUMP.ps1 major")
    print("   ```")
    print()
    print("   **Command Prompt:**")
    print("   ```cmd")
    print("   scripts\\VERSIONBUMP.bat patch")
    print("   scripts\\VERSIONBUMP.bat minor")
    print("   scripts\\VERSIONBUMP.bat major")
    print("   ```")
    print()
    print("   **Direct Python:**")
    print("   ```bash")
    print("   python scripts/version_bump.py patch")
    print("   python scripts/version_bump.py minor")
    print("   python scripts/version_bump.py major")
    print("   ```")
    print()

    print("📦 **VERSION TYPES:**")
    print()
    print("   **PATCH (2.1.1 → 2.1.2)** - Bug fixes, documentation")
    print("   ```")
    print("   VERSIONBUMP patch")
    print("   ```")
    print()
    print("   **MINOR (2.1.1 → 2.2.0)** - New features, enhancements")
    print("   ```")
    print("   VERSIONBUMP minor")
    print("   ```")
    print()
    print("   **MAJOR (2.1.1 → 3.0.0)** - Breaking changes, major updates")
    print("   ```")
    print("   VERSIONBUMP major")
    print("   ```")
    print()

    print("🔄 **WORKFLOW EXAMPLE:**")
    print()
    print("   1. **Make changes** → Edit code, fix bugs, add features")
    print("   2. **Test** → `pytest --cov=app --cov-report=html`")
    print("   3. **Version bump** → `scripts\\VERSIONBUMP.ps1 patch`")
    print("   4. **GitHub release** → Copy-paste generated release notes")
    print("   5. **Done!** → v2.1.2 is live on GitHub")
    print()

    print("📝 **EXAMPLE OUTPUT:**")
    print("   ```")
    print("   🚀 Starting version bump: patch")
    print("   🔄 Version bump: 2.1.1 → 2.1.2")
    print("   ✅ Updated version.py: 2.1.1 → 2.1.2")
    print("   ✅ Updated README.md with version 2.1.2")
    print("   ✅ Updated CHANGELOG.md with version 2.1.2")
    print("   ✅ Updated 3 files in docs/")
    print("   ✅ Added all changes to git")
    print("   ✅ Committed changes")
    print("   ✅ Pushed changes to origin/main")
    print("   ✅ Created and pushed tag v2.1.2")
    print("   🎉 Version bump completed successfully!")
    print("   ```")
    print()

    print("🏷️ **RELEASE INFORMATION GENERATED:**")
    print("   ```markdown")
    print("   🔧 Second Brain v2.1.2 - Bug Fix Release")
    print("   ")
    print("   ## 🔧 Second Brain v2.1.2")
    print("   **Release Date:** 2025-07-17")
    print("   **Version Type:** Patch")
    print("   **Previous Version:** v2.1.1")
    print("   ...")
    print("   ```")
    print()

    print("⚡ **QUICK START:**")
    print()
    print("   **Right now, try this:**")
    print("   ```powershell")
    print("   # Test the version bump logic (no changes made)")
    print('   python -c "')
    print("   import sys")
    print("   sys.path.append('scripts')")
    print("   from version_bump import VersionBumper")
    print("   b = VersionBumper()")
    print("   print(f'Current: {b.get_current_version()}')")
    print('   print(f\'Next patch: {b.calculate_new_version(\\"patch\\")}\')"')
    print("   ```")
    print()

    print("✨ **READY TO USE:**")
    print("   The VERSIONBUMP system is fully set up and ready!")
    print("   Just run the command when you want to release a new version.")
    print()
    print("   **Example for next release:**")
    print("   ```powershell")
    print(f"   # From: {current_dir}")
    print("   scripts\\VERSIONBUMP.ps1 patch")
    print("   ```")
    print()
    print("🎉 **Happy version bumping!** 🚀📦✨")


def main():
    """Main entry point"""
    show_versionbump_usage()


if __name__ == "__main__":
    main()
